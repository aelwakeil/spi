
usart.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 1d 05 00 08 1b 05 00 08 19 05 00 08     . . ............
 8000010:	19 05 00 08 19 05 00 08 19 05 00 08 00 00 00 00     ................
	...
 800002c:	1b 05 00 08 1b 05 00 08 00 00 00 00 1b 05 00 08     ................
 800003c:	1b 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800004c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800005c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800006c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800007c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800008c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800009c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 80000ac:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 80000bc:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 80000cc:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 80000dc:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 80000ec:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 80000fc:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800010c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800011c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800012c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800013c:	19 05 00 08 19 05 00 08 19 05 00 08 19 05 00 08     ................
 800014c:	19 05 00 08                                         ....

08000150 <delay_ms>:
		SendChar (*ptr);
		ptr++;	
	}								
}

void delay_ms(int d){
 8000150:	2300      	movs	r3, #0
    int i,j;
    for (j = 0; j < d; j++){
 8000152:	e007      	b.n	8000164 <delay_ms+0x14>
 8000154:	2200      	movs	r2, #0
	for (i = 0; i < 4100; i++)	/* Wait a bit. */
	      __asm__("nop");
 8000156:	bf00      	nop
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
	for (i = 0; i < 4100; i++)	/* Wait a bit. */
 8000158:	f241 0104 	movw	r1, #4100	; 0x1004
 800015c:	3201      	adds	r2, #1
 800015e:	428a      	cmp	r2, r1
 8000160:	d1f9      	bne.n	8000156 <delay_ms+0x6>
	}								
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
 8000162:	3301      	adds	r3, #1
 8000164:	4283      	cmp	r3, r0
 8000166:	dbf5      	blt.n	8000154 <delay_ms+0x4>
	for (i = 0; i < 4100; i++)	/* Wait a bit. */
	      __asm__("nop");
    }
}
 8000168:	4770      	bx	lr

0800016a <SendChar>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int SendChar (int ch)  					/* Write character to Serial Port     */
{      
 800016a:	b510      	push	{r4, lr}
 800016c:	4604      	mov	r4, r0
  usart_send_blocking(USART1, (unsigned char) ch);
 800016e:	b2e1      	uxtb	r1, r4
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <SendChar+0x12>)
 8000172:	f000 f9c6 	bl	8000502 <usart_send_blocking>
  return (ch);
}
 8000176:	4620      	mov	r0, r4
 8000178:	bd10      	pop	{r4, pc}
 800017a:	bf00      	nop
 800017c:	40013800 	.word	0x40013800

08000180 <uart_printf>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
 8000180:	b538      	push	{r3, r4, r5, lr}
 8000182:	4605      	mov	r5, r0
 8000184:	2400      	movs	r4, #0
	while (*ptr) {
 8000186:	e001      	b.n	800018c <uart_printf+0xc>
		SendChar (*ptr);
 8000188:	f7ff ffef 	bl	800016a <SendChar>
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
	while (*ptr) {
 800018c:	5d28      	ldrb	r0, [r5, r4]
 800018e:	3401      	adds	r4, #1
 8000190:	2800      	cmp	r0, #0
 8000192:	d1f9      	bne.n	8000188 <uart_printf+0x8>
		SendChar (*ptr);
		ptr++;	
	}								
}
 8000194:	bd38      	pop	{r3, r4, r5, pc}

08000196 <main>:
	      __asm__("nop");
    }
}

int main(void)
{
 8000196:	b508      	push	{r3, lr}
void uart_printf (char *ptr);


static void clock_setup(void)
{
	rcc_clock_setup_in_hse_8mhz_out_24mhz();
 8000198:	f000 f942 	bl	8000420 <rcc_clock_setup_in_hse_8mhz_out_24mhz>

	/* Enable GPIOC clock. */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_IOPCEN);
 800019c:	4821      	ldr	r0, [pc, #132]	; (8000224 <main+0x8e>)
 800019e:	2110      	movs	r1, #16
 80001a0:	f000 f8ec 	bl	800037c <rcc_peripheral_enable_clock>

	/* Enable clocks for GPIO port A (for GPIO_USART1_TX) and USART1. */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_IOPAEN);
 80001a4:	481f      	ldr	r0, [pc, #124]	; (8000224 <main+0x8e>)
 80001a6:	2104      	movs	r1, #4
 80001a8:	f000 f8e8 	bl	800037c <rcc_peripheral_enable_clock>
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_USART1EN);
 80001ac:	481d      	ldr	r0, [pc, #116]	; (8000224 <main+0x8e>)
 80001ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b2:	f000 f8e3 	bl	800037c <rcc_peripheral_enable_clock>
}

static void gpio_setup(void)
{
	/* Set GPIO9 (in GPIO port C) to 'output push-pull'. [LED] */
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,
 80001b6:	481c      	ldr	r0, [pc, #112]	; (8000228 <main+0x92>)
 80001b8:	2102      	movs	r1, #2
 80001ba:	2200      	movs	r2, #0
 80001bc:	2347      	movs	r3, #71	; 0x47
 80001be:	f000 f83d 	bl	800023c <gpio_set_mode>
}

static void usart_setup(void)
{
	/* Setup GPIO pin GPIO_USART1_TX/GPIO9 on GPIO port A for transmit. */
	gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_50_MHZ,
 80001c2:	481a      	ldr	r0, [pc, #104]	; (800022c <main+0x96>)
 80001c4:	2103      	movs	r1, #3
 80001c6:	2202      	movs	r2, #2
 80001c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001cc:	f000 f836 	bl	800023c <gpio_set_mode>

	/* Setup UART parameters. */
	// usart_set_baudrate(USART1, 38400);
	/* TODO usart_set_baudrate() doesn't support 24MHz clock (yet). */
	/* This is the equivalent: */
	USART_BRR(USART1) = (u16)((24000000 << 4) / (38400 * 16));
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <main+0x9a>)
 80001d2:	f240 2271 	movw	r2, #625	; 0x271
 80001d6:	601a      	str	r2, [r3, #0]

	usart_set_databits(USART1, 8);
 80001d8:	4816      	ldr	r0, [pc, #88]	; (8000234 <main+0x9e>)
 80001da:	2108      	movs	r1, #8
 80001dc:	f000 f962 	bl	80004a4 <usart_set_databits>
	usart_set_stopbits(USART1, USART_STOPBITS_1);
 80001e0:	4814      	ldr	r0, [pc, #80]	; (8000234 <main+0x9e>)
 80001e2:	2100      	movs	r1, #0
 80001e4:	f000 f967 	bl	80004b6 <usart_set_stopbits>
	usart_set_mode(USART1, USART_MODE_TX);
 80001e8:	4812      	ldr	r0, [pc, #72]	; (8000234 <main+0x9e>)
 80001ea:	2108      	movs	r1, #8
 80001ec:	f000 f96f 	bl	80004ce <usart_set_mode>
	usart_set_parity(USART1, USART_PARITY_NONE);
 80001f0:	4810      	ldr	r0, [pc, #64]	; (8000234 <main+0x9e>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	f000 f965 	bl	80004c2 <usart_set_parity>
	usart_set_flow_control(USART1, USART_FLOWCONTROL_NONE);
 80001f8:	2100      	movs	r1, #0
 80001fa:	480e      	ldr	r0, [pc, #56]	; (8000234 <main+0x9e>)
 80001fc:	f000 f96d 	bl	80004da <usart_set_flow_control>

	/* Finally enable the USART. */
	usart_enable(USART1);
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <main+0x9e>)
 8000202:	f000 f970 	bl	80004e6 <usart_enable>
int main(void)
{
	clock_setup();
	gpio_setup();
	usart_setup();
	gpio_toggle(GPIOC, GPIO0);	/* LED on/off */
 8000206:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x92>)
 8000208:	2101      	movs	r1, #1
 800020a:	f000 f947 	bl	800049c <gpio_toggle>
	char * data = "ahoj, test usart\r\n";
	while(1){
	  gpio_toggle(GPIOC, GPIO6);	/* LED on/off */
 800020e:	2140      	movs	r1, #64	; 0x40
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <main+0x92>)
 8000212:	f000 f943 	bl	800049c <gpio_toggle>
	  uart_printf(data);
 8000216:	4808      	ldr	r0, [pc, #32]	; (8000238 <main+0xa2>)
 8000218:	f7ff ffb2 	bl	8000180 <uart_printf>
	  delay_ms(5);
 800021c:	2005      	movs	r0, #5
 800021e:	f7ff ff97 	bl	8000150 <delay_ms>
 8000222:	e7f4      	b.n	800020e <main+0x78>
 8000224:	40021018 	.word	0x40021018
 8000228:	40011000 	.word	0x40011000
 800022c:	40010800 	.word	0x40010800
 8000230:	40013808 	.word	0x40013808
 8000234:	40013800 	.word	0x40013800
 8000238:	08000568 	.word	0x08000568

0800023c <gpio_set_mode>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be set, use logical OR '|' to separate them.
*/

void gpio_set_mode(u32 gpioport, u8 mode, u8 cnf, u16 gpios)
{
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 8000240:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8000242:	2400      	movs	r4, #0
 8000244:	6845      	ldr	r5, [r0, #4]
 8000246:	46a4      	mov	ip, r4

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
		/* Only set the config if the bit is set in gpios. */
		if (!((1 << i) & gpios))
 8000248:	fa43 f70c 	asr.w	r7, r3, ip
 800024c:	f017 0f01 	tst.w	r7, #1
 8000250:	d021      	beq.n	8000296 <gpio_set_mode+0x5a>
 8000252:	fa1f f88c 	uxth.w	r8, ip
			continue;

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000256:	f1b8 0f07 	cmp.w	r8, #7
 800025a:	d802      	bhi.n	8000262 <gpio_set_mode+0x26>
 800025c:	4627      	mov	r7, r4
 800025e:	46b2      	mov	sl, r6
 8000260:	e003      	b.n	800026a <gpio_set_mode+0x2e>
 8000262:	f1a4 0720 	sub.w	r7, r4, #32
 8000266:	b2bf      	uxth	r7, r7
 8000268:	46aa      	mov	sl, r5

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 800026a:	f04f 090f 	mov.w	r9, #15
 800026e:	fa09 f907 	lsl.w	r9, r9, r7
 8000272:	ea2a 0a09 	bic.w	sl, sl, r9
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000276:	f107 0902 	add.w	r9, r7, #2
 800027a:	fa02 f909 	lsl.w	r9, r2, r9
 800027e:	fa11 f707 	lsls.w	r7, r1, r7
 8000282:	ea49 0707 	orr.w	r7, r9, r7
 8000286:	ea47 070a 	orr.w	r7, r7, sl

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 800028a:	f1b8 0f08 	cmp.w	r8, #8
 800028e:	bf28      	it	cs
 8000290:	463d      	movcs	r5, r7
 8000292:	bf38      	it	cc
 8000294:	463e      	movcc	r6, r7
 8000296:	f10c 0c01 	add.w	ip, ip, #1
 800029a:	3404      	adds	r4, #4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 800029c:	f1bc 0f10 	cmp.w	ip, #16
		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
		tmp32 |= (mode << offset) | (cnf << (offset + 2));

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 80002a0:	b2a4      	uxth	r4, r4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 80002a2:	d1d1      	bne.n	8000248 <gpio_set_mode+0xc>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 80002a4:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 80002a6:	6045      	str	r5, [r0, #4]
}
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080002ac <rcc_wait_for_osc_ready>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_wait_for_osc_ready(osc_t osc)
{
	switch (osc) {
 80002ac:	2806      	cmp	r0, #6
 80002ae:	d82e      	bhi.n	800030e <rcc_wait_for_osc_ready+0x62>
 80002b0:	e8df f000 	tbb	[pc, r0]
 80002b4:	16100a04 	.word	0x16100a04
 80002b8:	221c      	.short	0x221c
 80002ba:	28          	.byte	0x28
 80002bb:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <rcc_wait_for_osc_ready+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80002c4:	d0fa      	beq.n	80002bc <rcc_wait_for_osc_ready+0x10>
 80002c6:	4770      	bx	lr
		break;
	case PLL2:
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <rcc_wait_for_osc_ready+0x64>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80002d0:	d0fa      	beq.n	80002c8 <rcc_wait_for_osc_ready+0x1c>
 80002d2:	4770      	bx	lr
		break;
	case PLL3:
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <rcc_wait_for_osc_ready+0x64>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80002dc:	d0fa      	beq.n	80002d4 <rcc_wait_for_osc_ready+0x28>
 80002de:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <rcc_wait_for_osc_ready+0x64>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80002e8:	d0fa      	beq.n	80002e0 <rcc_wait_for_osc_ready+0x34>
 80002ea:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <rcc_wait_for_osc_ready+0x64>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f013 0f02 	tst.w	r3, #2
 80002f4:	d0fa      	beq.n	80002ec <rcc_wait_for_osc_ready+0x40>
 80002f6:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <rcc_wait_for_osc_ready+0x68>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f013 0f02 	tst.w	r3, #2
 8000300:	d0fa      	beq.n	80002f8 <rcc_wait_for_osc_ready+0x4c>
 8000302:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <rcc_wait_for_osc_ready+0x6c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f013 0f02 	tst.w	r3, #2
 800030c:	d0fa      	beq.n	8000304 <rcc_wait_for_osc_ready+0x58>
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000
 8000314:	40021020 	.word	0x40021020
 8000318:	40021024 	.word	0x40021024

0800031c <rcc_osc_on>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(osc_t osc)
{
	switch (osc) {
 800031c:	2806      	cmp	r0, #6
 800031e:	d826      	bhi.n	800036e <rcc_osc_on+0x52>
 8000320:	e8df f000 	tbb	[pc, r0]
 8000324:	130e0904 	.word	0x130e0904
 8000328:	1a18      	.short	0x1a18
 800032a:	20          	.byte	0x20
 800032b:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <rcc_osc_on+0x54>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000334:	e014      	b.n	8000360 <rcc_osc_on+0x44>
		break;
	case PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <rcc_osc_on+0x54>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800033e:	e00f      	b.n	8000360 <rcc_osc_on+0x44>
		break;
	case PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <rcc_osc_on+0x54>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000348:	e00a      	b.n	8000360 <rcc_osc_on+0x44>
		break;
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <rcc_osc_on+0x54>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000352:	e005      	b.n	8000360 <rcc_osc_on+0x44>
		break;
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <rcc_osc_on+0x54>)
 8000356:	e000      	b.n	800035a <rcc_osc_on+0x3e>
		break;
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <rcc_osc_on+0x58>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	f042 0201 	orr.w	r2, r2, #1
 8000360:	601a      	str	r2, [r3, #0]
		break;
 8000362:	4770      	bx	lr
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000364:	4b04      	ldr	r3, [pc, #16]	; (8000378 <rcc_osc_on+0x5c>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	f042 0201 	orr.w	r2, r2, #1
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000
 8000374:	40021020 	.word	0x40021020
 8000378:	40021024 	.word	0x40021024

0800037c <rcc_peripheral_enable_clock>:
@li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
*/

void rcc_peripheral_enable_clock(volatile u32 *reg, u32 en)
{
	*reg |= en;
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	ea41 0303 	orr.w	r3, r1, r3
 8000382:	6003      	str	r3, [r0, #0]
}
 8000384:	4770      	bx	lr
	...

08000388 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(u32 clk)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <rcc_set_sysclk_source+0x10>)
 800038a:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
	RCC_CFGR = (reg32 | clk);
 800038c:	f022 0203 	bic.w	r2, r2, #3
 8000390:	ea40 0202 	orr.w	r2, r0, r2
 8000394:	601a      	str	r2, [r3, #0]
}
 8000396:	4770      	bx	lr
 8000398:	40021004 	.word	0x40021004

0800039c <rcc_set_pll_multiplication_factor>:

void rcc_set_pll_multiplication_factor(u32 mul)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <rcc_set_pll_multiplication_factor+0x10>)
 800039e:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 21) | (1 << 20) | (1 << 19) | (1 << 18));
	RCC_CFGR = (reg32 | (mul << 18));
 80003a0:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80003a4:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 80003a8:	601a      	str	r2, [r3, #0]
}
 80003aa:	4770      	bx	lr
 80003ac:	40021004 	.word	0x40021004

080003b0 <rcc_set_pll_source>:

void rcc_set_pll_source(u32 pllsrc)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <rcc_set_pll_source+0x10>)
 80003b2:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 16);
	RCC_CFGR = (reg32 | (pllsrc << 16));
 80003b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	4770      	bx	lr
 80003c0:	40021004 	.word	0x40021004

080003c4 <rcc_set_pllxtpre>:

void rcc_set_pllxtpre(u32 pllxtpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <rcc_set_pllxtpre+0x10>)
 80003c6:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 17);
	RCC_CFGR = (reg32 | (pllxtpre << 17));
 80003c8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80003cc:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	4770      	bx	lr
 80003d4:	40021004 	.word	0x40021004

080003d8 <rcc_set_adcpre>:

void rcc_set_adcpre(u32 adcpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <rcc_set_adcpre+0x10>)
 80003da:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 14) | (1 << 15));
	RCC_CFGR = (reg32 | (adcpre << 14));
 80003dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80003e0:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	4770      	bx	lr
 80003e8:	40021004 	.word	0x40021004

080003ec <rcc_set_ppre1>:

void rcc_set_ppre1(u32 ppre1)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <rcc_set_ppre1+0x10>)
 80003ee:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 8) | (1 << 9) | (1 << 10));
	RCC_CFGR = (reg32 | (ppre1 << 8));
 80003f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80003f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80003f8:	601a      	str	r2, [r3, #0]
}
 80003fa:	4770      	bx	lr
 80003fc:	40021004 	.word	0x40021004

08000400 <T.0>:

void rcc_set_hpre(u32 hpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <T.0+0xc>)
 8000402:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8000404:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	4770      	bx	lr
 800040c:	40021004 	.word	0x40021004

08000410 <T.1>:

void rcc_set_ppre2(u32 ppre2)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <T.1+0xc>)
 8000412:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 11) | (1 << 12) | (1 << 13));
 8000414:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
	RCC_CFGR = (reg32 | (ppre2 << 11));
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	4770      	bx	lr
 800041c:	40021004 	.word	0x40021004

08000420 <rcc_clock_setup_in_hse_8mhz_out_24mhz>:
/** @brief RCC Set System Clock PLL at 24MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_24mhz(void)
{
 8000420:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8000422:	2004      	movs	r0, #4
 8000424:	f7ff ff7a 	bl	800031c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8000428:	2004      	movs	r0, #4
 800042a:	f7ff ff3f 	bl	80002ac <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff ffaa 	bl	8000388 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8000434:	2003      	movs	r0, #3
 8000436:	f7ff ff71 	bl	800031c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 800043a:	2003      	movs	r0, #3
 800043c:	f7ff ff36 	bl	80002ac <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 8000440:	2001      	movs	r0, #1
 8000442:	f7ff ffa1 	bl	8000388 <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 8000446:	f7ff ffdb 	bl	8000400 <T.0>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV2);	/* Set. 12MHz Max. 14MHz */
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff ffc4 	bl	80003d8 <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_NODIV);	/* Set. 24MHz Max. 36MHz */
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff ffcb 	bl	80003ec <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 8000456:	f7ff ffdb 	bl	8000410 <T.1>
	 * Sysclk runs with 24MHz -> 0 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f87a 	bl	8000554 <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 3.
	 * 8MHz (external) * 3 (multiplier) = 24MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL3);
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff ff9b 	bl	800039c <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ffa2 	bl	80003b0 <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff ffa9 	bl	80003c4 <rcc_set_pllxtpre>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff ff52 	bl	800031c <rcc_osc_on>
	rcc_wait_for_osc_ready(PLL);
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff17 	bl	80002ac <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 800047e:	2002      	movs	r0, #2
 8000480:	f7ff ff82 	bl	8000388 <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ppre1_frequency = 24000000;
 8000484:	4b02      	ldr	r3, [pc, #8]	; (8000490 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x70>)
 8000486:	4a03      	ldr	r2, [pc, #12]	; (8000494 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x74>)
 8000488:	6013      	str	r3, [r2, #0]
	rcc_ppre2_frequency = 24000000;
 800048a:	4a03      	ldr	r2, [pc, #12]	; (8000498 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x78>)
 800048c:	6013      	str	r3, [r2, #0]
}
 800048e:	bd08      	pop	{r3, pc}
 8000490:	016e3600 	.word	0x016e3600
 8000494:	20000000 	.word	0x20000000
 8000498:	20000004 	.word	0x20000004

0800049c <gpio_toggle>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void gpio_toggle(u32 gpioport, u16 gpios)
{
	GPIO_ODR(gpioport) ^= gpios;
 800049c:	68c3      	ldr	r3, [r0, #12]
 800049e:	404b      	eors	r3, r1
 80004a0:	60c3      	str	r3, [r0, #12]
}
 80004a2:	4770      	bx	lr

080004a4 <usart_set_databits>:
*/

void usart_set_databits(u32 usart, u32 bits)
{
	if (bits == 8)
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80004a4:	68c3      	ldr	r3, [r0, #12]
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(u32 usart, u32 bits)
{
	if (bits == 8)
 80004a6:	2908      	cmp	r1, #8
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80004a8:	bf0c      	ite	eq
 80004aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
	else
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80004ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80004b2:	60c3      	str	r3, [r0, #12]
 80004b4:	4770      	bx	lr

080004b6 <usart_set_stopbits>:

void usart_set_stopbits(u32 usart, u32 stopbits)
{
	u32 reg32;

	reg32 = USART_CR2(usart);
 80004b6:	6903      	ldr	r3, [r0, #16]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 80004b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004bc:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 80004be:	6103      	str	r3, [r0, #16]
}
 80004c0:	4770      	bx	lr

080004c2 <usart_set_parity>:

void usart_set_parity(u32 usart, u32 parity)
{
	u32 reg32;

	reg32 = USART_CR1(usart);
 80004c2:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 80004c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004c8:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80004ca:	60c3      	str	r3, [r0, #12]
}
 80004cc:	4770      	bx	lr

080004ce <usart_set_mode>:

void usart_set_mode(u32 usart, u32 mode)
{
	u32 reg32;

	reg32 = USART_CR1(usart);
 80004ce:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80004d0:	f023 030c 	bic.w	r3, r3, #12
 80004d4:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80004d6:	60c3      	str	r3, [r0, #12]
}
 80004d8:	4770      	bx	lr

080004da <usart_set_flow_control>:

void usart_set_flow_control(u32 usart, u32 flowcontrol)
{
	u32 reg32;

	reg32 = USART_CR3(usart);
 80004da:	6943      	ldr	r3, [r0, #20]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 80004dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004e0:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 80004e2:	6143      	str	r3, [r0, #20]
}
 80004e4:	4770      	bx	lr

080004e6 <usart_enable>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_enable(u32 usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 80004e6:	68c3      	ldr	r3, [r0, #12]
 80004e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ec:	60c3      	str	r3, [r0, #12]
}
 80004ee:	4770      	bx	lr

080004f0 <usart_send>:
*/

void usart_send(u32 usart, u16 data)
{
	/* Send data. */
	USART_DR(usart) = (data & USART_DR_MASK);
 80004f0:	05c9      	lsls	r1, r1, #23
 80004f2:	0dc9      	lsrs	r1, r1, #23
 80004f4:	6041      	str	r1, [r0, #4]
}
 80004f6:	4770      	bx	lr

080004f8 <usart_wait_send_ready>:
*/

void usart_wait_send_ready(u32 usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_SR(usart) & USART_SR_TXE) == 0);
 80004f8:	6803      	ldr	r3, [r0, #0]
 80004fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80004fe:	d0fb      	beq.n	80004f8 <usart_wait_send_ready>
}
 8000500:	4770      	bx	lr

08000502 <usart_send_blocking>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(u32 usart, u16 data)
{
 8000502:	b570      	push	{r4, r5, r6, lr}
 8000504:	4604      	mov	r4, r0
 8000506:	460d      	mov	r5, r1
	usart_wait_send_ready(usart);
 8000508:	f7ff fff6 	bl	80004f8 <usart_wait_send_ready>
	usart_send(usart, data);
 800050c:	4620      	mov	r0, r4
 800050e:	4629      	mov	r1, r5
}
 8000510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
*/

void usart_send_blocking(u32 usart, u16 data)
{
	usart_wait_send_ready(usart);
	usart_send(usart, data);
 8000514:	f7ff bfec 	b.w	80004f0 <usart_send>

08000518 <blocking_handler>:
	/* Call the application's entry point. */
	main();
}

void blocking_handler(void)
{
 8000518:	e7fe      	b.n	8000518 <blocking_handler>

0800051a <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800051a:	4770      	bx	lr

0800051c <reset_handler>:

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <reset_handler+0x28>)
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <reset_handler+0x2c>)
 8000520:	e003      	b.n	800052a <reset_handler+0xe>
		*dest = *src;
 8000522:	f852 1b04 	ldr.w	r1, [r2], #4
 8000526:	f843 1b04 	str.w	r1, [r3], #4

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 800052a:	4908      	ldr	r1, [pc, #32]	; (800054c <reset_handler+0x30>)
 800052c:	428b      	cmp	r3, r1
 800052e:	d3f8      	bcc.n	8000522 <reset_handler+0x6>
 8000530:	e002      	b.n	8000538 <reset_handler+0x1c>
		*dest = *src;

	while (dest < &_ebss)
		*dest++ = 0;
 8000532:	2200      	movs	r2, #0
 8000534:	f843 2b04 	str.w	r2, [r3], #4
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
		*dest = *src;

	while (dest < &_ebss)
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <reset_handler+0x34>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d3f9      	bcc.n	8000532 <reset_handler+0x16>

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
 800053e:	f7ff be2a 	b.w	8000196 <main>
 8000542:	bf00      	nop
 8000544:	0800057c 	.word	0x0800057c
 8000548:	20000000 	.word	0x20000000
 800054c:	20000008 	.word	0x20000008
 8000550:	20000008 	.word	0x20000008

08000554 <flash_set_ws>:

void flash_set_ws(u32 ws)
{
	u32 reg32;

	reg32 = FLASH_ACR;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <flash_set_ws+0x10>)
 8000556:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 8000558:	f022 0207 	bic.w	r2, r2, #7
	reg32 |= ws;
 800055c:	ea40 0202 	orr.w	r2, r0, r2
	FLASH_ACR = reg32;
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	4770      	bx	lr
 8000564:	40022000 	.word	0x40022000
 8000568:	6a6f6861 	.word	0x6a6f6861
 800056c:	6574202c 	.word	0x6574202c
 8000570:	75207473 	.word	0x75207473
 8000574:	74726173 	.word	0x74726173
 8000578:	00000a0d 	.word	0x00000a0d
