
spi.elf:     file format elf32-littlearm


Disassembly of section .text:

08002000 <vector_table>:
 8002000:	00 20 00 20 b5 26 00 08 b3 26 00 08 b1 26 00 08     . . .&...&...&..
 8002010:	b1 26 00 08 b1 26 00 08 b1 26 00 08 00 00 00 00     .&...&...&......
	...
 800202c:	b3 26 00 08 b3 26 00 08 00 00 00 00 b3 26 00 08     .&...&.......&..
 800203c:	b3 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800204c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800205c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800206c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800207c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800208c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800209c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 80020ac:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 80020bc:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 80020cc:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 80020dc:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 80020ec:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 80020fc:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800210c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800211c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800212c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800213c:	b1 26 00 08 b1 26 00 08 b1 26 00 08 b1 26 00 08     .&...&...&...&..
 800214c:	b1 26 00 08                                         .&..

08002150 <delay_ms>:
	}

	return 0;
}

void delay_ms(int d){
 8002150:	2300      	movs	r3, #0
    int i,j;
    for (j = 0; j < d; j++){
 8002152:	e007      	b.n	8002164 <delay_ms+0x14>
 8002154:	2200      	movs	r2, #0
	for (i = 0; i < 4100; i++)	/* Wait a bit. */
	      __asm__("nop");
 8002156:	bf00      	nop
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
	for (i = 0; i < 4100; i++)	/* Wait a bit. */
 8002158:	f241 0104 	movw	r1, #4100	; 0x1004
 800215c:	3201      	adds	r2, #1
 800215e:	428a      	cmp	r2, r1
 8002160:	d1f9      	bne.n	8002156 <delay_ms+0x6>
	return 0;
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
 8002162:	3301      	adds	r3, #1
 8002164:	4283      	cmp	r3, r0
 8002166:	dbf5      	blt.n	8002154 <delay_ms+0x4>
	for (i = 0; i < 4100; i++)	/* Wait a bit. */
	      __asm__("nop");
    }
}
 8002168:	4770      	bx	lr

0800216a <SendChar>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int SendChar (int ch)  					/* Write character to Serial Port     */
{      
 800216a:	b510      	push	{r4, lr}
 800216c:	4604      	mov	r4, r0
  usart_send_blocking(USART1, (unsigned char) ch);
 800216e:	b2e1      	uxtb	r1, r4
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <SendChar+0x12>)
 8002172:	f000 fa92 	bl	800269a <usart_send_blocking>
  return (ch);
}
 8002176:	4620      	mov	r0, r4
 8002178:	bd10      	pop	{r4, pc}
 800217a:	bf00      	nop
 800217c:	40013800 	.word	0x40013800

08002180 <uart_printf>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4605      	mov	r5, r0
 8002184:	2400      	movs	r4, #0
	while (*ptr) {
 8002186:	e001      	b.n	800218c <uart_printf+0xc>
		SendChar (*ptr);
 8002188:	f7ff ffef 	bl	800216a <SendChar>
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
	while (*ptr) {
 800218c:	5d28      	ldrb	r0, [r5, r4]
 800218e:	3401      	adds	r4, #1
 8002190:	2800      	cmp	r0, #0
 8002192:	d1f9      	bne.n	8002188 <uart_printf+0x8>
		SendChar (*ptr);
		ptr++;	
	}								
}
 8002194:	bd38      	pop	{r3, r4, r5, pc}

08002196 <main>:
  epTurnOff();
}


int main(void)
{
 8002196:	b513      	push	{r0, r1, r4, lr}
void uart_printf (char *ptr);

static void clock_setup(void)
{
	//rcc_clock_setup_in_hse_12mhz_out_72mhz();
	rcc_clock_setup_in_hse_8mhz_out_24mhz();
 8002198:	f000 f9a0 	bl	80024dc <rcc_clock_setup_in_hse_8mhz_out_24mhz>
	/* Enable GPIOA, GPIOB, GPIOC clock. */
	rcc_peripheral_enable_clock(&RCC_APB2ENR,
 800219c:	211c      	movs	r1, #28
 800219e:	4849      	ldr	r0, [pc, #292]	; (80022c4 <main+0x12e>)
 80021a0:	f000 f940 	bl	8002424 <rcc_peripheral_enable_clock>
				    RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN);

	/* Enable clocks for GPIO port A (for GPIO_USART1_TX) and USART1. */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_AFIOEN);
 80021a4:	2101      	movs	r1, #1
 80021a6:	4847      	ldr	r0, [pc, #284]	; (80022c4 <main+0x12e>)
 80021a8:	f000 f93c 	bl	8002424 <rcc_peripheral_enable_clock>
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_USART1EN);
 80021ac:	4845      	ldr	r0, [pc, #276]	; (80022c4 <main+0x12e>)
 80021ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021b2:	f000 f937 	bl	8002424 <rcc_peripheral_enable_clock>

	/* Enable SPI2 Periph and gpio clocks */
	rcc_peripheral_enable_clock(&RCC_APB2ENR,
 80021b6:	4843      	ldr	r0, [pc, #268]	; (80022c4 <main+0x12e>)
 80021b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021bc:	f000 f932 	bl	8002424 <rcc_peripheral_enable_clock>
}

static void gpio_setup(void)
{
	/* Set GPIO1 (in GPIO port C) to 'output push-pull'. */
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,
 80021c0:	2200      	movs	r2, #0
 80021c2:	2307      	movs	r3, #7
 80021c4:	2102      	movs	r1, #2
 80021c6:	4840      	ldr	r0, [pc, #256]	; (80022c8 <main+0x132>)
 80021c8:	f000 f88c 	bl	80022e4 <gpio_set_mode>
{
  int counter = 0;
  u16 rx_value = 0x42;
	clock_setup();
	gpio_setup();
	gpio_set(GPIOC, GPIO0 | GPIO1 | GPIO2);
 80021cc:	2107      	movs	r1, #7
 80021ce:	483e      	ldr	r0, [pc, #248]	; (80022c8 <main+0x132>)
 80021d0:	f000 f9c2 	bl	8002558 <gpio_set>
	gpio_clear(GPIOC, GPIO0);
 80021d4:	2101      	movs	r1, #1
 80021d6:	483c      	ldr	r0, [pc, #240]	; (80022c8 <main+0x132>)
 80021d8:	f000 f9c0 	bl	800255c <gpio_clear>
}

static void usart_setup(void)
{
	/* Setup GPIO pin GPIO_USART1_TX and GPIO_USART1_RX. */
	gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_50_MHZ,
 80021dc:	2103      	movs	r1, #3
 80021de:	2202      	movs	r2, #2
 80021e0:	483a      	ldr	r0, [pc, #232]	; (80022cc <main+0x136>)
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	f000 f87d 	bl	80022e4 <gpio_set_mode>
	/*gpio_set_mode(GPIOA, GPIO_MODE_INPUT,
		      GPIO_CNF_INPUT_FLOAT, GPIO_USART1_RX);
	*/
	/* Setup UART parameters. */
	//usart_set_baudrate(USART1, 38400);
	USART_BRR(USART1) = (u16)((24000000 << 4) / (38400 * 16));
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <main+0x13a>)
 80021ec:	f240 2271 	movw	r2, #625	; 0x271
 80021f0:	601a      	str	r2, [r3, #0]
	usart_set_databits(USART1, 8);
 80021f2:	2108      	movs	r1, #8
 80021f4:	4837      	ldr	r0, [pc, #220]	; (80022d4 <main+0x13e>)
 80021f6:	f000 fa21 	bl	800263c <usart_set_databits>
	usart_set_stopbits(USART1, USART_STOPBITS_1);
 80021fa:	2100      	movs	r1, #0
 80021fc:	4835      	ldr	r0, [pc, #212]	; (80022d4 <main+0x13e>)
 80021fe:	f000 fa26 	bl	800264e <usart_set_stopbits>
	usart_set_mode(USART1, USART_MODE_TX_RX);
 8002202:	210c      	movs	r1, #12
 8002204:	4833      	ldr	r0, [pc, #204]	; (80022d4 <main+0x13e>)
 8002206:	f000 fa2e 	bl	8002666 <usart_set_mode>
	usart_set_parity(USART1, USART_PARITY_NONE);
 800220a:	2100      	movs	r1, #0
 800220c:	4831      	ldr	r0, [pc, #196]	; (80022d4 <main+0x13e>)
 800220e:	f000 fa24 	bl	800265a <usart_set_parity>
	usart_set_flow_control(USART1, USART_FLOWCONTROL_NONE);
 8002212:	2100      	movs	r1, #0
 8002214:	482f      	ldr	r0, [pc, #188]	; (80022d4 <main+0x13e>)
 8002216:	f000 fa2c 	bl	8002672 <usart_set_flow_control>

	/* Finally enable the USART. */
	usart_enable(USART1);
 800221a:	482e      	ldr	r0, [pc, #184]	; (80022d4 <main+0x13e>)
 800221c:	f000 fa2f 	bl	800267e <usart_enable>
	clock_setup();
	gpio_setup();
	gpio_set(GPIOC, GPIO0 | GPIO1 | GPIO2);
	gpio_clear(GPIOC, GPIO0);
	usart_setup();
	gpio_clear(GPIOC, GPIO1);
 8002220:	2102      	movs	r1, #2
 8002222:	4829      	ldr	r0, [pc, #164]	; (80022c8 <main+0x132>)
 8002224:	f000 f99a 	bl	800255c <gpio_clear>

  gpio_set_mode(GPIOA, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT,
          GPIO6);
  */
  /* Configure GPIOs: SS=PB12, SCK=PB13, MISO=PB14 and MOSI=PA15 */
  gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_50_MHZ,
 8002228:	482b      	ldr	r0, [pc, #172]	; (80022d8 <main+0x142>)
 800222a:	2103      	movs	r1, #3
 800222c:	2202      	movs	r2, #2
 800222e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002232:	f000 f857 	bl	80022e4 <gpio_set_mode>
            GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO12 |
					    GPIO13 |
                                            GPIO15 );

  //SPI input
  gpio_set_mode(GPIOB, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, GPIO14);
 8002236:	4828      	ldr	r0, [pc, #160]	; (80022d8 <main+0x142>)
 8002238:	2100      	movs	r1, #0
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002240:	f000 f850 	bl	80022e4 <gpio_set_mode>
  //BUSSY C7
  gpio_set_mode(GPIOC, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, GPIO7);
 8002244:	4820      	ldr	r0, [pc, #128]	; (80022c8 <main+0x132>)
 8002246:	2100      	movs	r1, #0
 8002248:	2201      	movs	r2, #1
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	f000 f84a 	bl	80022e4 <gpio_set_mode>
  /*gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_50_MHZ,
            GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO5 |
					    GPIO6 |
					    GPIO7 );
  */
  gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,
 8002250:	2102      	movs	r1, #2
 8002252:	2200      	movs	r2, #0
 8002254:	2360      	movs	r3, #96	; 0x60
 8002256:	481c      	ldr	r0, [pc, #112]	; (80022c8 <main+0x132>)
 8002258:	f000 f844 	bl	80022e4 <gpio_set_mode>
		      GPIO_CNF_OUTPUT_PUSHPULL, GPIO5 |
					    GPIO6 );
  /* Reset SPI, SPI_CR1 register cleared, SPI is disabled */
  spi_reset(SPI2);
 800225c:	481f      	ldr	r0, [pc, #124]	; (80022dc <main+0x146>)
 800225e:	f000 f9b9 	bl	80025d4 <spi_reset>
   * Frame format: MSB First
   */
 // spi_init_master(SPI2, 1000000, SPI_CR1_CPOL_CLK_TO_0_WHEN_IDLE,
 //                  SPI_CR1_CPHA_CLK_TRANSITION_1, SPI_CR1_DFF_8BIT,
 //                  SPI_CR1_LSBFIRST);
  spi_init_master(SPI2, SPI_CR1_BAUDRATE_FPCLK_DIV_64, SPI_CR1_CPOL_CLK_TO_1_WHEN_IDLE,
 8002262:	2400      	movs	r4, #0
 8002264:	2128      	movs	r1, #40	; 0x28
 8002266:	2202      	movs	r2, #2
 8002268:	2301      	movs	r3, #1
 800226a:	481c      	ldr	r0, [pc, #112]	; (80022dc <main+0x146>)
 800226c:	9400      	str	r4, [sp, #0]
 800226e:	9401      	str	r4, [sp, #4]
 8002270:	f000 f97b 	bl	800256a <spi_init_master>
   * Note:
   * Setting nss high is very important, even if we are controlling the GPIO
   * ourselves this bit needs to be at least set to 1, otherwise the spi
   * peripheral will not send any data out.
   */
  spi_enable_software_slave_management(SPI2);
 8002274:	4819      	ldr	r0, [pc, #100]	; (80022dc <main+0x146>)
 8002276:	f000 f99d 	bl	80025b4 <spi_enable_software_slave_management>
  spi_set_nss_high(SPI2);
 800227a:	4818      	ldr	r0, [pc, #96]	; (80022dc <main+0x146>)
 800227c:	f000 f99f 	bl	80025be <spi_set_nss_high>

  spi_disable_error_interrupt(SPI2);
 8002280:	4816      	ldr	r0, [pc, #88]	; (80022dc <main+0x146>)
 8002282:	f000 f9a1 	bl	80025c8 <spi_disable_error_interrupt>
  spi_disable_crc(SPI2);
 8002286:	4815      	ldr	r0, [pc, #84]	; (80022dc <main+0x146>)
 8002288:	f000 f98f 	bl	80025aa <spi_disable_crc>
  /* Enable SPI2 periph. */
  spi_enable(SPI2);
 800228c:	4813      	ldr	r0, [pc, #76]	; (80022dc <main+0x146>)
 800228e:	f000 f97e 	bl	800258e <spi_enable>
	gpio_set(GPIOC, GPIO0 | GPIO1 | GPIO2);
	gpio_clear(GPIOC, GPIO0);
	usart_setup();
	gpio_clear(GPIOC, GPIO1);
	spi_setup();
	gpio_clear(GPIOC, GPIO2);
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <main+0x132>)
 8002294:	2104      	movs	r1, #4
 8002296:	f000 f961 	bl	800255c <gpio_clear>
	
	while (1) {
		
		/* printf the value that SPI should send */
		/* blocking send of the byte out SPI1 */
		spi_write(SPI2, (uint8_t) counter);
 800229a:	b2e1      	uxtb	r1, r4
 800229c:	480f      	ldr	r0, [pc, #60]	; (80022dc <main+0x146>)
 800229e:	f000 f97b 	bl	8002598 <spi_write>
		/* Read the byte that just came in (use a loopback between MISO and MOSI
		 * to get the same byte back)
		 */
		rx_value = spi_read(SPI2);
 80022a2:	480e      	ldr	r0, [pc, #56]	; (80022dc <main+0x146>)
 80022a4:	f000 f97a 	bl	800259c <spi_read>

		counter++;
		
		//epSendData();
		/* LED on/off */
		gpio_toggle(GPIOC, GPIO1);
 80022a8:	2102      	movs	r1, #2
 80022aa:	4807      	ldr	r0, [pc, #28]	; (80022c8 <main+0x132>)
 80022ac:	f000 f959 	bl	8002562 <gpio_toggle>
		uart_printf("Test mode\r\n");
 80022b0:	480b      	ldr	r0, [pc, #44]	; (80022e0 <main+0x14a>)
 80022b2:	f7ff ff65 	bl	8002180 <uart_printf>
		delay_ms(1000);
 80022b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		 * to get the same byte back)
		 */
		rx_value = spi_read(SPI2);
		/* printf the byte just received */

		counter++;
 80022ba:	3401      	adds	r4, #1
		
		//epSendData();
		/* LED on/off */
		gpio_toggle(GPIOC, GPIO1);
		uart_printf("Test mode\r\n");
		delay_ms(1000);
 80022bc:	f7ff ff48 	bl	8002150 <delay_ms>
 80022c0:	e7eb      	b.n	800229a <main+0x104>
 80022c2:	bf00      	nop
 80022c4:	40021018 	.word	0x40021018
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40010800 	.word	0x40010800
 80022d0:	40013808 	.word	0x40013808
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40010c00 	.word	0x40010c00
 80022dc:	40003800 	.word	0x40003800
 80022e0:	08002700 	.word	0x08002700

080022e4 <gpio_set_mode>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be set, use logical OR '|' to separate them.
*/

void gpio_set_mode(u32 gpioport, u8 mode, u8 cnf, u16 gpios)
{
 80022e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 80022e8:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 80022ea:	2400      	movs	r4, #0
 80022ec:	6845      	ldr	r5, [r0, #4]
 80022ee:	46a4      	mov	ip, r4

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
		/* Only set the config if the bit is set in gpios. */
		if (!((1 << i) & gpios))
 80022f0:	fa43 f70c 	asr.w	r7, r3, ip
 80022f4:	f017 0f01 	tst.w	r7, #1
 80022f8:	d021      	beq.n	800233e <gpio_set_mode+0x5a>
 80022fa:	fa1f f88c 	uxth.w	r8, ip
			continue;

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 80022fe:	f1b8 0f07 	cmp.w	r8, #7
 8002302:	d802      	bhi.n	800230a <gpio_set_mode+0x26>
 8002304:	4627      	mov	r7, r4
 8002306:	46b2      	mov	sl, r6
 8002308:	e003      	b.n	8002312 <gpio_set_mode+0x2e>
 800230a:	f1a4 0720 	sub.w	r7, r4, #32
 800230e:	b2bf      	uxth	r7, r7
 8002310:	46aa      	mov	sl, r5

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8002312:	f04f 090f 	mov.w	r9, #15
 8002316:	fa09 f907 	lsl.w	r9, r9, r7
 800231a:	ea2a 0a09 	bic.w	sl, sl, r9
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 800231e:	f107 0902 	add.w	r9, r7, #2
 8002322:	fa02 f909 	lsl.w	r9, r2, r9
 8002326:	fa11 f707 	lsls.w	r7, r1, r7
 800232a:	ea49 0707 	orr.w	r7, r9, r7
 800232e:	ea47 070a 	orr.w	r7, r7, sl

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 8002332:	f1b8 0f08 	cmp.w	r8, #8
 8002336:	bf28      	it	cs
 8002338:	463d      	movcs	r5, r7
 800233a:	bf38      	it	cc
 800233c:	463e      	movcc	r6, r7
 800233e:	f10c 0c01 	add.w	ip, ip, #1
 8002342:	3404      	adds	r4, #4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 8002344:	f1bc 0f10 	cmp.w	ip, #16
		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
		tmp32 |= (mode << offset) | (cnf << (offset + 2));

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 8002348:	b2a4      	uxth	r4, r4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 800234a:	d1d1      	bne.n	80022f0 <gpio_set_mode+0xc>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 800234c:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 800234e:	6045      	str	r5, [r0, #4]
}
 8002350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002354 <rcc_wait_for_osc_ready>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_wait_for_osc_ready(osc_t osc)
{
	switch (osc) {
 8002354:	2806      	cmp	r0, #6
 8002356:	d82e      	bhi.n	80023b6 <rcc_wait_for_osc_ready+0x62>
 8002358:	e8df f000 	tbb	[pc, r0]
 800235c:	16100a04 	.word	0x16100a04
 8002360:	221c      	.short	0x221c
 8002362:	28          	.byte	0x28
 8002363:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <rcc_wait_for_osc_ready+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800236c:	d0fa      	beq.n	8002364 <rcc_wait_for_osc_ready+0x10>
 800236e:	4770      	bx	lr
		break;
	case PLL2:
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <rcc_wait_for_osc_ready+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002378:	d0fa      	beq.n	8002370 <rcc_wait_for_osc_ready+0x1c>
 800237a:	4770      	bx	lr
		break;
	case PLL3:
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <rcc_wait_for_osc_ready+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002384:	d0fa      	beq.n	800237c <rcc_wait_for_osc_ready+0x28>
 8002386:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <rcc_wait_for_osc_ready+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002390:	d0fa      	beq.n	8002388 <rcc_wait_for_osc_ready+0x34>
 8002392:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <rcc_wait_for_osc_ready+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f013 0f02 	tst.w	r3, #2
 800239c:	d0fa      	beq.n	8002394 <rcc_wait_for_osc_ready+0x40>
 800239e:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <rcc_wait_for_osc_ready+0x68>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f013 0f02 	tst.w	r3, #2
 80023a8:	d0fa      	beq.n	80023a0 <rcc_wait_for_osc_ready+0x4c>
 80023aa:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <rcc_wait_for_osc_ready+0x6c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f013 0f02 	tst.w	r3, #2
 80023b4:	d0fa      	beq.n	80023ac <rcc_wait_for_osc_ready+0x58>
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40021020 	.word	0x40021020
 80023c0:	40021024 	.word	0x40021024

080023c4 <rcc_osc_on>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(osc_t osc)
{
	switch (osc) {
 80023c4:	2806      	cmp	r0, #6
 80023c6:	d826      	bhi.n	8002416 <rcc_osc_on+0x52>
 80023c8:	e8df f000 	tbb	[pc, r0]
 80023cc:	130e0904 	.word	0x130e0904
 80023d0:	1a18      	.short	0x1a18
 80023d2:	20          	.byte	0x20
 80023d3:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <rcc_osc_on+0x54>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023dc:	e014      	b.n	8002408 <rcc_osc_on+0x44>
		break;
	case PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <rcc_osc_on+0x54>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023e6:	e00f      	b.n	8002408 <rcc_osc_on+0x44>
		break;
	case PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <rcc_osc_on+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023f0:	e00a      	b.n	8002408 <rcc_osc_on+0x44>
		break;
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <rcc_osc_on+0x54>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023fa:	e005      	b.n	8002408 <rcc_osc_on+0x44>
		break;
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <rcc_osc_on+0x54>)
 80023fe:	e000      	b.n	8002402 <rcc_osc_on+0x3e>
		break;
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <rcc_osc_on+0x58>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
		break;
 800240a:	4770      	bx	lr
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <rcc_osc_on+0x5c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	4770      	bx	lr
 8002418:	40021000 	.word	0x40021000
 800241c:	40021020 	.word	0x40021020
 8002420:	40021024 	.word	0x40021024

08002424 <rcc_peripheral_enable_clock>:
@li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
*/

void rcc_peripheral_enable_clock(volatile u32 *reg, u32 en)
{
	*reg |= en;
 8002424:	6803      	ldr	r3, [r0, #0]
 8002426:	ea41 0303 	orr.w	r3, r1, r3
 800242a:	6003      	str	r3, [r0, #0]
}
 800242c:	4770      	bx	lr

0800242e <rcc_peripheral_reset>:
@li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
*/

void rcc_peripheral_reset(volatile u32 *reg, u32 reset)
{
	*reg |= reset;
 800242e:	6803      	ldr	r3, [r0, #0]
 8002430:	ea41 0303 	orr.w	r3, r1, r3
 8002434:	6003      	str	r3, [r0, #0]
}
 8002436:	4770      	bx	lr

08002438 <rcc_peripheral_clear_reset>:
@li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
*/

void rcc_peripheral_clear_reset(volatile u32 *reg, u32 clear_reset)
{
	*reg &= ~clear_reset;
 8002438:	6803      	ldr	r3, [r0, #0]
 800243a:	ea23 0301 	bic.w	r3, r3, r1
 800243e:	6003      	str	r3, [r0, #0]
}
 8002440:	4770      	bx	lr
	...

08002444 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(u32 clk)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <rcc_set_sysclk_source+0x10>)
 8002446:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
	RCC_CFGR = (reg32 | clk);
 8002448:	f022 0203 	bic.w	r2, r2, #3
 800244c:	ea40 0202 	orr.w	r2, r0, r2
 8002450:	601a      	str	r2, [r3, #0]
}
 8002452:	4770      	bx	lr
 8002454:	40021004 	.word	0x40021004

08002458 <rcc_set_pll_multiplication_factor>:

void rcc_set_pll_multiplication_factor(u32 mul)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <rcc_set_pll_multiplication_factor+0x10>)
 800245a:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 21) | (1 << 20) | (1 << 19) | (1 << 18));
	RCC_CFGR = (reg32 | (mul << 18));
 800245c:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8002460:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8002464:	601a      	str	r2, [r3, #0]
}
 8002466:	4770      	bx	lr
 8002468:	40021004 	.word	0x40021004

0800246c <rcc_set_pll_source>:

void rcc_set_pll_source(u32 pllsrc)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <rcc_set_pll_source+0x10>)
 800246e:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 16);
	RCC_CFGR = (reg32 | (pllsrc << 16));
 8002470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002474:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	4770      	bx	lr
 800247c:	40021004 	.word	0x40021004

08002480 <rcc_set_pllxtpre>:

void rcc_set_pllxtpre(u32 pllxtpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <rcc_set_pllxtpre+0x10>)
 8002482:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 17);
	RCC_CFGR = (reg32 | (pllxtpre << 17));
 8002484:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002488:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 800248c:	601a      	str	r2, [r3, #0]
}
 800248e:	4770      	bx	lr
 8002490:	40021004 	.word	0x40021004

08002494 <rcc_set_adcpre>:

void rcc_set_adcpre(u32 adcpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <rcc_set_adcpre+0x10>)
 8002496:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 14) | (1 << 15));
	RCC_CFGR = (reg32 | (adcpre << 14));
 8002498:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800249c:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80024a0:	601a      	str	r2, [r3, #0]
}
 80024a2:	4770      	bx	lr
 80024a4:	40021004 	.word	0x40021004

080024a8 <rcc_set_ppre1>:

void rcc_set_ppre1(u32 ppre1)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <rcc_set_ppre1+0x10>)
 80024aa:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 8) | (1 << 9) | (1 << 10));
	RCC_CFGR = (reg32 | (ppre1 << 8));
 80024ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024b0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	4770      	bx	lr
 80024b8:	40021004 	.word	0x40021004

080024bc <T.0>:

void rcc_set_hpre(u32 hpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <T.0+0xc>)
 80024be:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 80024c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	4770      	bx	lr
 80024c8:	40021004 	.word	0x40021004

080024cc <T.1>:

void rcc_set_ppre2(u32 ppre2)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80024cc:	4b02      	ldr	r3, [pc, #8]	; (80024d8 <T.1+0xc>)
 80024ce:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 11) | (1 << 12) | (1 << 13));
 80024d0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
	RCC_CFGR = (reg32 | (ppre2 << 11));
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	4770      	bx	lr
 80024d8:	40021004 	.word	0x40021004

080024dc <rcc_clock_setup_in_hse_8mhz_out_24mhz>:
/** @brief RCC Set System Clock PLL at 24MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_24mhz(void)
{
 80024dc:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 80024de:	2004      	movs	r0, #4
 80024e0:	f7ff ff70 	bl	80023c4 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 80024e4:	2004      	movs	r0, #4
 80024e6:	f7ff ff35 	bl	8002354 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff ffaa 	bl	8002444 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f7ff ff67 	bl	80023c4 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 80024f6:	2003      	movs	r0, #3
 80024f8:	f7ff ff2c 	bl	8002354 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff ffa1 	bl	8002444 <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 8002502:	f7ff ffdb 	bl	80024bc <T.0>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV2);	/* Set. 12MHz Max. 14MHz */
 8002506:	2000      	movs	r0, #0
 8002508:	f7ff ffc4 	bl	8002494 <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_NODIV);	/* Set. 24MHz Max. 36MHz */
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff ffcb 	bl	80024a8 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 8002512:	f7ff ffdb 	bl	80024cc <T.1>
	 * Sysclk runs with 24MHz -> 0 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f8e8 	bl	80026ec <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 3.
	 * 8MHz (external) * 3 (multiplier) = 24MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL3);
 800251c:	2001      	movs	r0, #1
 800251e:	f7ff ff9b 	bl	8002458 <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff ffa2 	bl	800246c <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff ffa9 	bl	8002480 <rcc_set_pllxtpre>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff ff48 	bl	80023c4 <rcc_osc_on>
	rcc_wait_for_osc_ready(PLL);
 8002534:	2000      	movs	r0, #0
 8002536:	f7ff ff0d 	bl	8002354 <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 800253a:	2002      	movs	r0, #2
 800253c:	f7ff ff82 	bl	8002444 <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ppre1_frequency = 24000000;
 8002540:	4b02      	ldr	r3, [pc, #8]	; (800254c <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x70>)
 8002542:	4a03      	ldr	r2, [pc, #12]	; (8002550 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x74>)
 8002544:	6013      	str	r3, [r2, #0]
	rcc_ppre2_frequency = 24000000;
 8002546:	4a03      	ldr	r2, [pc, #12]	; (8002554 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x78>)
 8002548:	6013      	str	r3, [r2, #0]
}
 800254a:	bd08      	pop	{r3, pc}
 800254c:	016e3600 	.word	0x016e3600
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004

08002558 <gpio_set>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void gpio_set(u32 gpioport, u16 gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8002558:	6101      	str	r1, [r0, #16]
}
 800255a:	4770      	bx	lr

0800255c <gpio_clear>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void  gpio_clear(u32 gpioport, u16 gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 800255c:	0409      	lsls	r1, r1, #16
 800255e:	6101      	str	r1, [r0, #16]
}
 8002560:	4770      	bx	lr

08002562 <gpio_toggle>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void gpio_toggle(u32 gpioport, u16 gpios)
{
	GPIO_ODR(gpioport) ^= gpios;
 8002562:	68c3      	ldr	r3, [r0, #12]
 8002564:	404b      	eors	r3, r1
 8002566:	60c3      	str	r3, [r0, #12]
}
 8002568:	4770      	bx	lr

0800256a <spi_init_master>:
@param[in] lsbfirst Unsigned int32. Frame format lsb/msb first @ref spi_lsbfirst.
@returns int. Error code.
*/

int spi_init_master(u32 spi, u32 br, u32 cpol, u32 cpha, u32 dff, u32 lsbfirst)
{
 800256a:	b510      	push	{r4, lr}
	u32 reg32 = SPI_CR1(spi);
 800256c:	6804      	ldr	r4, [r0, #0]

	/* Reset all bits omitting SPE, CRCEN and CRCNEXT bits. */
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;

	reg32 |= SPI_CR1_MSTR;	/* Configure SPI as master. */
 800256e:	f041 0104 	orr.w	r1, r1, #4

	reg32 |= br;		/* Set baud rate bits. */
 8002572:	4311      	orrs	r1, r2
int spi_init_master(u32 spi, u32 br, u32 cpol, u32 cpha, u32 dff, u32 lsbfirst)
{
	u32 reg32 = SPI_CR1(spi);

	/* Reset all bits omitting SPE, CRCEN and CRCNEXT bits. */
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;
 8002574:	f404 5c41 	and.w	ip, r4, #12352	; 0x3040
	reg32 |= SPI_CR1_MSTR;	/* Configure SPI as master. */

	reg32 |= br;		/* Set baud rate bits. */
	reg32 |= cpol;		/* Set CPOL value. */
	reg32 |= cpha;		/* Set CPHA value. */
	reg32 |= dff;		/* Set data format (8 or 16 bits). */
 8002578:	9a02      	ldr	r2, [sp, #8]
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;

	reg32 |= SPI_CR1_MSTR;	/* Configure SPI as master. */

	reg32 |= br;		/* Set baud rate bits. */
	reg32 |= cpol;		/* Set CPOL value. */
 800257a:	ea41 0c0c 	orr.w	ip, r1, ip
	reg32 |= cpha;		/* Set CPHA value. */
 800257e:	ea4c 0303 	orr.w	r3, ip, r3
	reg32 |= dff;		/* Set data format (8 or 16 bits). */
 8002582:	4313      	orrs	r3, r2
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 8002584:	9a03      	ldr	r2, [sp, #12]
 8002586:	4313      	orrs	r3, r2

	/* TODO: NSS pin handling. */

	SPI_CR1(spi) = reg32;
 8002588:	6003      	str	r3, [r0, #0]

	return 0; /* TODO */
}
 800258a:	2000      	movs	r0, #0
 800258c:	bd10      	pop	{r4, pc}

0800258e <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(u32 spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 800258e:	6803      	ldr	r3, [r0, #0]
 8002590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002594:	6003      	str	r3, [r0, #0]
}
 8002596:	4770      	bx	lr

08002598 <spi_write>:
*/

void spi_write(u32 spi, u16 data)
{
	/* Write data (8 or 16 bits, depending on DFF) into DR. */
	SPI_DR(spi) = data;
 8002598:	60c1      	str	r1, [r0, #12]
}
 800259a:	4770      	bx	lr

0800259c <spi_read>:
*/

u16 spi_read(u32 spi)
{
	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE))
 800259c:	6883      	ldr	r3, [r0, #8]
 800259e:	f013 0f01 	tst.w	r3, #1
 80025a2:	d0fb      	beq.n	800259c <spi_read>
		;

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80025a4:	68c0      	ldr	r0, [r0, #12]
}
 80025a6:	b280      	uxth	r0, r0
 80025a8:	4770      	bx	lr

080025aa <spi_disable_crc>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_disable_crc(u32 spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_CRCEN;
 80025aa:	6803      	ldr	r3, [r0, #0]
 80025ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025b0:	6003      	str	r3, [r0, #0]
}
 80025b2:	4770      	bx	lr

080025b4 <spi_enable_software_slave_management>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable_software_slave_management(u32 spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSM;
 80025b4:	6803      	ldr	r3, [r0, #0]
 80025b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ba:	6003      	str	r3, [r0, #0]
}
 80025bc:	4770      	bx	lr

080025be <spi_set_nss_high>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_nss_high(u32 spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSI;
 80025be:	6803      	ldr	r3, [r0, #0]
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6003      	str	r3, [r0, #0]
}
 80025c6:	4770      	bx	lr

080025c8 <spi_disable_error_interrupt>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_disable_error_interrupt(u32 spi)
{
	SPI_CR2(spi) &= ~SPI_CR2_ERRIE;
 80025c8:	6843      	ldr	r3, [r0, #4]
 80025ca:	f023 0320 	bic.w	r3, r3, #32
 80025ce:	6043      	str	r3, [r0, #4]
}
 80025d0:	4770      	bx	lr
	...

080025d4 <spi_reset>:
@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_reset(u32 spi_peripheral)
{
	switch (spi_peripheral) {
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <spi_reset+0x54>)

@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_reset(u32 spi_peripheral)
{
 80025d6:	b510      	push	{r4, lr}
	switch (spi_peripheral) {
 80025d8:	4298      	cmp	r0, r3
 80025da:	d018      	beq.n	800260e <spi_reset+0x3a>
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <spi_reset+0x58>)
 80025de:	4298      	cmp	r0, r3
 80025e0:	d003      	beq.n	80025ea <spi_reset+0x16>
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <spi_reset+0x5c>)
 80025e4:	4298      	cmp	r0, r3
 80025e6:	d11e      	bne.n	8002626 <spi_reset+0x52>
 80025e8:	e008      	b.n	80025fc <spi_reset+0x28>
	case SPI1:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80025ea:	4812      	ldr	r0, [pc, #72]	; (8002634 <spi_reset+0x60>)
 80025ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f0:	f7ff ff1d 	bl	800242e <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_SPI1RST);
 80025f4:	480f      	ldr	r0, [pc, #60]	; (8002634 <spi_reset+0x60>)
 80025f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025fa:	e010      	b.n	800261e <spi_reset+0x4a>
		break;
	case SPI2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI2RST);
 80025fc:	480e      	ldr	r0, [pc, #56]	; (8002638 <spi_reset+0x64>)
 80025fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002602:	f7ff ff14 	bl	800242e <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI2RST);
 8002606:	480c      	ldr	r0, [pc, #48]	; (8002638 <spi_reset+0x64>)
 8002608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800260c:	e007      	b.n	800261e <spi_reset+0x4a>
		break;
#if defined(STM32F1) || defined(STM32F2) || defined(STM32F3) || defined(STM32F4)
	case SPI3:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
 800260e:	480a      	ldr	r0, [pc, #40]	; (8002638 <spi_reset+0x64>)
 8002610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002614:	f7ff ff0b 	bl	800242e <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
 8002618:	4807      	ldr	r0, [pc, #28]	; (8002638 <spi_reset+0x64>)
 800261a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
		break;
#endif
	}
}
 800261e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI2RST);
		break;
#if defined(STM32F1) || defined(STM32F2) || defined(STM32F3) || defined(STM32F4)
	case SPI3:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
 8002622:	f7ff bf09 	b.w	8002438 <rcc_peripheral_clear_reset>
 8002626:	bd10      	pop	{r4, pc}
 8002628:	40003c00 	.word	0x40003c00
 800262c:	40013000 	.word	0x40013000
 8002630:	40003800 	.word	0x40003800
 8002634:	4002100c 	.word	0x4002100c
 8002638:	40021010 	.word	0x40021010

0800263c <usart_set_databits>:
*/

void usart_set_databits(u32 usart, u32 bits)
{
	if (bits == 8)
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 800263c:	68c3      	ldr	r3, [r0, #12]
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(u32 usart, u32 bits)
{
	if (bits == 8)
 800263e:	2908      	cmp	r1, #8
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8002640:	bf0c      	ite	eq
 8002642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
	else
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8002646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800264a:	60c3      	str	r3, [r0, #12]
 800264c:	4770      	bx	lr

0800264e <usart_set_stopbits>:

void usart_set_stopbits(u32 usart, u32 stopbits)
{
	u32 reg32;

	reg32 = USART_CR2(usart);
 800264e:	6903      	ldr	r3, [r0, #16]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8002650:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002654:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8002656:	6103      	str	r3, [r0, #16]
}
 8002658:	4770      	bx	lr

0800265a <usart_set_parity>:

void usart_set_parity(u32 usart, u32 parity)
{
	u32 reg32;

	reg32 = USART_CR1(usart);
 800265a:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 800265c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002660:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8002662:	60c3      	str	r3, [r0, #12]
}
 8002664:	4770      	bx	lr

08002666 <usart_set_mode>:

void usart_set_mode(u32 usart, u32 mode)
{
	u32 reg32;

	reg32 = USART_CR1(usart);
 8002666:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8002668:	f023 030c 	bic.w	r3, r3, #12
 800266c:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 800266e:	60c3      	str	r3, [r0, #12]
}
 8002670:	4770      	bx	lr

08002672 <usart_set_flow_control>:

void usart_set_flow_control(u32 usart, u32 flowcontrol)
{
	u32 reg32;

	reg32 = USART_CR3(usart);
 8002672:	6943      	ldr	r3, [r0, #20]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8002674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002678:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 800267a:	6143      	str	r3, [r0, #20]
}
 800267c:	4770      	bx	lr

0800267e <usart_enable>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_enable(u32 usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 800267e:	68c3      	ldr	r3, [r0, #12]
 8002680:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002684:	60c3      	str	r3, [r0, #12]
}
 8002686:	4770      	bx	lr

08002688 <usart_send>:
*/

void usart_send(u32 usart, u16 data)
{
	/* Send data. */
	USART_DR(usart) = (data & USART_DR_MASK);
 8002688:	05c9      	lsls	r1, r1, #23
 800268a:	0dc9      	lsrs	r1, r1, #23
 800268c:	6041      	str	r1, [r0, #4]
}
 800268e:	4770      	bx	lr

08002690 <usart_wait_send_ready>:
*/

void usart_wait_send_ready(u32 usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_SR(usart) & USART_SR_TXE) == 0);
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002696:	d0fb      	beq.n	8002690 <usart_wait_send_ready>
}
 8002698:	4770      	bx	lr

0800269a <usart_send_blocking>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(u32 usart, u16 data)
{
 800269a:	b570      	push	{r4, r5, r6, lr}
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
	usart_wait_send_ready(usart);
 80026a0:	f7ff fff6 	bl	8002690 <usart_wait_send_ready>
	usart_send(usart, data);
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
}
 80026a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
*/

void usart_send_blocking(u32 usart, u16 data)
{
	usart_wait_send_ready(usart);
	usart_send(usart, data);
 80026ac:	f7ff bfec 	b.w	8002688 <usart_send>

080026b0 <blocking_handler>:
	/* Call the application's entry point. */
	main();
}

void blocking_handler(void)
{
 80026b0:	e7fe      	b.n	80026b0 <blocking_handler>

080026b2 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80026b2:	4770      	bx	lr

080026b4 <reset_handler>:

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 80026b4:	4a09      	ldr	r2, [pc, #36]	; (80026dc <reset_handler+0x28>)
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <reset_handler+0x2c>)
 80026b8:	e003      	b.n	80026c2 <reset_handler+0xe>
		*dest = *src;
 80026ba:	f852 1b04 	ldr.w	r1, [r2], #4
 80026be:	f843 1b04 	str.w	r1, [r3], #4

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <reset_handler+0x30>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d3f8      	bcc.n	80026ba <reset_handler+0x6>
 80026c8:	e002      	b.n	80026d0 <reset_handler+0x1c>
		*dest = *src;

	while (dest < &_ebss)
		*dest++ = 0;
 80026ca:	2200      	movs	r2, #0
 80026cc:	f843 2b04 	str.w	r2, [r3], #4
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
		*dest = *src;

	while (dest < &_ebss)
 80026d0:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <reset_handler+0x34>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d3f9      	bcc.n	80026ca <reset_handler+0x16>

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
 80026d6:	f7ff bd5e 	b.w	8002196 <main>
 80026da:	bf00      	nop
 80026dc:	0800270c 	.word	0x0800270c
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000008 	.word	0x20000008

080026ec <flash_set_ws>:

void flash_set_ws(u32 ws)
{
	u32 reg32;

	reg32 = FLASH_ACR;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <flash_set_ws+0x10>)
 80026ee:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 80026f0:	f022 0207 	bic.w	r2, r2, #7
	reg32 |= ws;
 80026f4:	ea40 0202 	orr.w	r2, r0, r2
	FLASH_ACR = reg32;
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	4770      	bx	lr
 80026fc:	40022000 	.word	0x40022000
 8002700:	74736554 	.word	0x74736554
 8002704:	646f6d20 	.word	0x646f6d20
 8002708:	000a0d65 	.word	0x000a0d65
