
spi.elf:     file format elf32-littlearm


Disassembly of section .text:

08002000 <vector_table>:
 8002000:	00 20 00 20 f9 26 00 08 f7 26 00 08 f5 26 00 08     . . .&...&...&..
 8002010:	f5 26 00 08 f5 26 00 08 f5 26 00 08 00 00 00 00     .&...&...&......
	...
 800202c:	f7 26 00 08 f7 26 00 08 00 00 00 00 f7 26 00 08     .&...&.......&..
 800203c:	f7 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800204c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800205c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800206c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800207c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800208c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800209c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 80020ac:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 80020bc:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 80020cc:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 80020dc:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 80020ec:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 80020fc:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800210c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800211c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800212c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800213c:	f5 26 00 08 f5 26 00 08 f5 26 00 08 f5 26 00 08     .&...&...&...&..
 800214c:	f5 26 00 08                                         .&..

08002150 <delay_ms>:
		//uart_printf("Test mode\r\n");
		delay_ms(1000);
	}
}

void delay_ms(int d){
 8002150:	2300      	movs	r3, #0
    int i,j;
    for (j = 0; j < d; j++){
 8002152:	e007      	b.n	8002164 <delay_ms+0x14>
 8002154:	2200      	movs	r2, #0
	for (i = 0; i < 4900; i++)	/* Wait a bit. */
	      __asm__("nop");
 8002156:	bf00      	nop
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
	for (i = 0; i < 4900; i++)	/* Wait a bit. */
 8002158:	f241 3124 	movw	r1, #4900	; 0x1324
 800215c:	3201      	adds	r2, #1
 800215e:	428a      	cmp	r2, r1
 8002160:	d1f9      	bne.n	8002156 <delay_ms+0x6>
	}
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
 8002162:	3301      	adds	r3, #1
 8002164:	4283      	cmp	r3, r0
 8002166:	dbf5      	blt.n	8002154 <delay_ms+0x4>
	for (i = 0; i < 4900; i++)	/* Wait a bit. */
	      __asm__("nop");
    }
}
 8002168:	4770      	bx	lr

0800216a <ep_on>:
}

static void ep_on(int val){
  //Vcc
    //BP12 
    if(val == 1){
 800216a:	2801      	cmp	r0, #1
      gpio_set(GPIOC, GPIO6);
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <ep_on+0x12>)
}

static void ep_on(int val){
  //Vcc
    //BP12 
    if(val == 1){
 800216e:	d102      	bne.n	8002176 <ep_on+0xc>
      gpio_set(GPIOC, GPIO6);
 8002170:	2140      	movs	r1, #64	; 0x40
 8002172:	f000 ba3d 	b.w	80025f0 <gpio_set>
    } else {
      gpio_clear(GPIOC, GPIO6);
 8002176:	2140      	movs	r1, #64	; 0x40
 8002178:	f000 ba3c 	b.w	80025f4 <gpio_clear>
 800217c:	40011000 	.word	0x40011000

08002180 <ep_cs>:
}


static void ep_cs(int val){
    //BP12 
    if(val == 1){
 8002180:	2801      	cmp	r0, #1
      //spi_set_nss_high(SPI2);
      gpio_set(GPIOB, GPIO12);
 8002182:	4804      	ldr	r0, [pc, #16]	; (8002194 <ep_cs+0x14>)
 8002184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}


static void ep_cs(int val){
    //BP12 
    if(val == 1){
 8002188:	d101      	bne.n	800218e <ep_cs+0xe>
      //spi_set_nss_high(SPI2);
      gpio_set(GPIOB, GPIO12);
 800218a:	f000 ba31 	b.w	80025f0 <gpio_set>
    } else {
      //spi_set_nss_low(SPI2);
      gpio_clear(GPIOB, GPIO12);
 800218e:	f000 ba31 	b.w	80025f4 <gpio_clear>
 8002192:	bf00      	nop
 8002194:	40010c00 	.word	0x40010c00

08002198 <main>:
  epTurnOff();
}


int main(void)
{
 8002198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
void uart_printf (char *ptr);

static void clock_setup(void)
{
	//rcc_clock_setup_in_hse_12mhz_out_72mhz();
	rcc_clock_setup_in_hse_8mhz_out_24mhz();
 800219c:	f000 f9ea 	bl	8002574 <rcc_clock_setup_in_hse_8mhz_out_24mhz>
	/* Enable GPIOA, GPIOB, GPIOC clock. */
	rcc_peripheral_enable_clock(&RCC_APB2ENR,
 80021a0:	211c      	movs	r1, #28
 80021a2:	4866      	ldr	r0, [pc, #408]	; (800233c <main+0x1a4>)
 80021a4:	f000 f98a 	bl	80024bc <rcc_peripheral_enable_clock>
	/* Enable clocks for GPIO port A (for GPIO_USART1_TX) and USART1. */
// 	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_AFIOEN);
// 	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_USART1EN);

	/* Enable SPI2 Periph and gpio clocks */
	rcc_peripheral_enable_clock(&RCC_APB1ENR,
 80021a8:	4865      	ldr	r0, [pc, #404]	; (8002340 <main+0x1a8>)
 80021aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ae:	f000 f985 	bl	80024bc <rcc_peripheral_enable_clock>
}

static void gpio_setup(void)
{
	/* Set GPIO1 (in GPIO port C) to 'output push-pull'. */
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,
 80021b2:	2200      	movs	r2, #0
 80021b4:	2307      	movs	r3, #7
 80021b6:	2102      	movs	r1, #2
 80021b8:	4862      	ldr	r0, [pc, #392]	; (8002344 <main+0x1ac>)
 80021ba:	f000 f8df 	bl	800237c <gpio_set_mode>
{
  int counter = 5;
  //u16 rx_value = 0x42;
	clock_setup();
	gpio_setup();
	gpio_set(GPIOC, GPIO0 | GPIO1 | GPIO2);
 80021be:	2107      	movs	r1, #7
 80021c0:	4860      	ldr	r0, [pc, #384]	; (8002344 <main+0x1ac>)
 80021c2:	f000 fa15 	bl	80025f0 <gpio_set>
	gpio_clear(GPIOC, GPIO0);
 80021c6:	2101      	movs	r1, #1
 80021c8:	485e      	ldr	r0, [pc, #376]	; (8002344 <main+0x1ac>)
 80021ca:	f000 fa13 	bl	80025f4 <gpio_clear>
	//usart_setup();
	gpio_clear(GPIOC, GPIO1);
 80021ce:	2102      	movs	r1, #2
 80021d0:	485c      	ldr	r0, [pc, #368]	; (8002344 <main+0x1ac>)
 80021d2:	f000 fa0f 	bl	80025f4 <gpio_clear>

  gpio_set_mode(GPIOA, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT,
          GPIO6);
  */
  /* Configure GPIOs: SS=PB12, SCK=PB13, MISO=PB14 and MOSI=PA15 */
  gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_50_MHZ,
 80021d6:	2103      	movs	r1, #3
 80021d8:	2202      	movs	r2, #2
 80021da:	485b      	ldr	r0, [pc, #364]	; (8002348 <main+0x1b0>)
 80021dc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80021e0:	f000 f8cc 	bl	800237c <gpio_set_mode>
            GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO12 |
					    GPIO13 |
                                            GPIO15 );

  //SPI input
  gpio_set_mode(GPIOB, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, GPIO14);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2201      	movs	r2, #1
 80021e8:	4857      	ldr	r0, [pc, #348]	; (8002348 <main+0x1b0>)
 80021ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ee:	f000 f8c5 	bl	800237c <gpio_set_mode>
  //BUSSY C7
  gpio_set_mode(GPIOC, GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, GPIO7);
 80021f2:	2100      	movs	r1, #0
 80021f4:	2201      	movs	r2, #1
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	4852      	ldr	r0, [pc, #328]	; (8002344 <main+0x1ac>)
 80021fa:	f000 f8bf 	bl	800237c <gpio_set_mode>
  /*gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_50_MHZ,
            GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO5 |
					    GPIO6 |
					    GPIO7 );
  */
  gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,
 80021fe:	2102      	movs	r1, #2
 8002200:	2200      	movs	r2, #0
 8002202:	2360      	movs	r3, #96	; 0x60
 8002204:	484f      	ldr	r0, [pc, #316]	; (8002344 <main+0x1ac>)
 8002206:	f000 f8b9 	bl	800237c <gpio_set_mode>
		      GPIO_CNF_OUTPUT_PUSHPULL, GPIO5 |
					    GPIO6 );
  /* Reset SPI, SPI_CR1 register cleared, SPI is disabled */
  spi_reset(SPI2);
 800220a:	4850      	ldr	r0, [pc, #320]	; (800234c <main+0x1b4>)
 800220c:	f000 fa2a 	bl	8002664 <spi_reset>
   * Frame format: MSB First
   */
//  spi_init_master(SPI2, 1000000, SPI_CR1_CPOL_CLK_TO_0_WHEN_IDLE,
//                   SPI_CR1_CPHA_CLK_TRANSITION_1, SPI_CR1_DFF_8BIT,
//                   SPI_CR1_LSBFIRST);
  spi_init_master(SPI2, SPI_CR1_BAUDRATE_FPCLK_DIV_64, SPI_CR1_CPOL_CLK_TO_1_WHEN_IDLE,
 8002210:	2400      	movs	r4, #0
 8002212:	2202      	movs	r2, #2
 8002214:	2301      	movs	r3, #1
 8002216:	2128      	movs	r1, #40	; 0x28
 8002218:	484c      	ldr	r0, [pc, #304]	; (800234c <main+0x1b4>)
 800221a:	9400      	str	r4, [sp, #0]
 800221c:	9401      	str	r4, [sp, #4]
 800221e:	f000 f9f0 	bl	8002602 <spi_init_master>
   * Note:
   * Setting nss high is very important, even if we are controlling the GPIO
   * ourselves this bit needs to be at least set to 1, otherwise the spi
   * peripheral will not send any data out.
   */
  spi_enable_software_slave_management(SPI2);
 8002222:	484a      	ldr	r0, [pc, #296]	; (800234c <main+0x1b4>)
 8002224:	f000 fa0f 	bl	8002646 <spi_enable_software_slave_management>
  spi_set_nss_high(SPI2);
 8002228:	4848      	ldr	r0, [pc, #288]	; (800234c <main+0x1b4>)
 800222a:	f000 fa11 	bl	8002650 <spi_set_nss_high>

  spi_disable_error_interrupt(SPI2);
 800222e:	4847      	ldr	r0, [pc, #284]	; (800234c <main+0x1b4>)
 8002230:	f000 fa13 	bl	800265a <spi_disable_error_interrupt>
  spi_disable_crc(SPI2);
 8002234:	4845      	ldr	r0, [pc, #276]	; (800234c <main+0x1b4>)
 8002236:	f000 fa01 	bl	800263c <spi_disable_crc>
  /* Enable SPI2 periph. */
  spi_enable(SPI2);
 800223a:	4844      	ldr	r0, [pc, #272]	; (800234c <main+0x1b4>)
 800223c:	f000 f9f3 	bl	8002626 <spi_enable>
	gpio_set(GPIOC, GPIO0 | GPIO1 | GPIO2);
	gpio_clear(GPIOC, GPIO0);
	//usart_setup();
	gpio_clear(GPIOC, GPIO1);
	spi_setup();
	gpio_clear(GPIOC, GPIO2);
 8002240:	2104      	movs	r1, #4
 8002242:	4840      	ldr	r0, [pc, #256]	; (8002344 <main+0x1ac>)
 8002244:	f000 f9d6 	bl	80025f4 <gpio_clear>
	
	//gpio_clear(GPIOC, GPIO7);
	/* Blink the LED (PC1) on the board with every transmitted byte. */
	//turn off display
	gpio_clear(GPIOC, GPIO5 | GPIO6);
 8002248:	2160      	movs	r1, #96	; 0x60
 800224a:	483e      	ldr	r0, [pc, #248]	; (8002344 <main+0x1ac>)
 800224c:	f000 f9d2 	bl	80025f4 <gpio_clear>
    //turn off EP
    ep_on(0);		// V Chip RESET Set E T Select SETUP get = low get 40% low x TCLK ~60% x TCLK
    gpio_clear(GPIOC, GPIO5);
}
static void epTurnOn(void){
    ep_cs(0);
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff ff95 	bl	8002180 <ep_cs>
    ep_on(0);		// V Chip RESET Set E T Select SETUP get = low get 40% low x TCLK ~60% x TCLK
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ff87 	bl	800216a <ep_on>
    gpio_set(GPIOC, GPIO5); //Vcc
 800225c:	2120      	movs	r1, #32
 800225e:	4839      	ldr	r0, [pc, #228]	; (8002344 <main+0x1ac>)
 8002260:	f000 f9c6 	bl	80025f0 <gpio_set>
    delay_ms(25);
 8002264:	2019      	movs	r0, #25
 8002266:	f7ff ff73 	bl	8002150 <delay_ms>
    ep_cs(1);		// Chip Select get high
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff ff88 	bl	8002180 <ep_cs>
    delay_ms(45);	// TVcc_on > 10 ms PE
 8002270:	202d      	movs	r0, #45	; 0x2d
 8002272:	f7ff ff6d 	bl	8002150 <delay_ms>

    //Reset Display TCON
    ep_on(1);		// RESET get high
 8002276:	2001      	movs	r0, #1
 8002278:	f7ff ff77 	bl	800216a <ep_on>
    delay_ms (45);	// Delay 19 ms
 800227c:	202d      	movs	r0, #45	; 0x2d
 800227e:	f7ff ff67 	bl	8002150 <delay_ms>
    ep_cs(0);		// Chip Select get high
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff ff7c 	bl	8002180 <ep_cs>
  epTurnOn();
  
  int i,j,k,l;
  uint8_t color = 0xFF;
  // Chip Select get low
  delay_ms (120);
 8002288:	2078      	movs	r0, #120	; 0x78
 800228a:	f7ff ff61 	bl	8002150 <delay_ms>
  // Delay TCS_SI > 1 ms ; TRESET_CS + TCS_SI ≧ 20ms
  // Send Header Byte
  // Send Header Byte ID = 0x06A0 (for 10.2" EPD)
  
  spi_send(SPI2, (uint8_t) 0x06);
 800228e:	2106      	movs	r1, #6
 8002290:	482e      	ldr	r0, [pc, #184]	; (800234c <main+0x1b4>)
 8002292:	f000 f9cd 	bl	8002630 <spi_send>
  spi_send(SPI2, (uint8_t) 0xA0);
 8002296:	21a0      	movs	r1, #160	; 0xa0
 8002298:	482c      	ldr	r0, [pc, #176]	; (800234c <main+0x1b4>)
 800229a:	f000 f9c9 	bl	8002630 <spi_send>
  delay_ms (125);			// TDELAY1 min 5 ms
 800229e:	207d      	movs	r0, #125	; 0x7d
 80022a0:	f7ff ff56 	bl	8002150 <delay_ms>
 80022a4:	4626      	mov	r6, r4
 80022a6:	25ff      	movs	r5, #255	; 0xff
 80022a8:	e029      	b.n	80022fe <main+0x166>
  {
      k = 0;
      for (j=0 ; j < 64 ; j++)
      // 1 Line of pixels, 1024/8/2=64 Bytes
      {
	  spi_send(SPI2, color); 
 80022aa:	4828      	ldr	r0, [pc, #160]	; (800234c <main+0x1b4>)
 80022ac:	4629      	mov	r1, r5
 80022ae:	f000 f9bf 	bl	8002630 <spi_send>
	  spi_send(SPI2, color);// // Byte2, Byte1, “Black” “Black”  for example example.
 80022b2:	4826      	ldr	r0, [pc, #152]	; (800234c <main+0x1b4>)
 80022b4:	4629      	mov	r1, r5
 80022b6:	f000 f9bb 	bl	8002630 <spi_send>
	  //Tdelay2 min 0 ms
	  //delay_ms (1); 
	  if(k > 4) {
 80022ba:	2f04      	cmp	r7, #4
 80022bc:	dd07      	ble.n	80022ce <main+0x136>
	    k = 0;
	    color = color == 0xFF ? 0x00 : 0xFF;
 80022be:	2dff      	cmp	r5, #255	; 0xff
 80022c0:	d002      	beq.n	80022c8 <main+0x130>
 80022c2:	25ff      	movs	r5, #255	; 0xff
 80022c4:	2700      	movs	r7, #0
 80022c6:	e003      	b.n	80022d0 <main+0x138>
 80022c8:	2500      	movs	r5, #0
 80022ca:	462f      	mov	r7, r5
 80022cc:	e000      	b.n	80022d0 <main+0x138>
	  } else {
	    k++;
 80022ce:	3701      	adds	r7, #1
  l = 0;
  for (i=0 ; i < 1280 ; i++)
  //10.2” EPD resolution= 1024 x 1280
  {
      k = 0;
      for (j=0 ; j < 64 ; j++)
 80022d0:	f108 0801 	add.w	r8, r8, #1
 80022d4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 80022d8:	d1e7      	bne.n	80022aa <main+0x112>
	    color = color == 0xFF ? 0x00 : 0xFF;
	  } else {
	    k++;
	  }
      }
      if(l > 80) {
 80022da:	2e50      	cmp	r6, #80	; 0x50
 80022dc:	dd07      	ble.n	80022ee <main+0x156>
	  l = 0;
	  color = color == 0xFF ? 0x00 : 0xFF;
 80022de:	2dff      	cmp	r5, #255	; 0xff
 80022e0:	d102      	bne.n	80022e8 <main+0x150>
 80022e2:	3dff      	subs	r5, #255	; 0xff
 80022e4:	462e      	mov	r6, r5
 80022e6:	e003      	b.n	80022f0 <main+0x158>
 80022e8:	25ff      	movs	r5, #255	; 0xff
 80022ea:	2600      	movs	r6, #0
 80022ec:	e000      	b.n	80022f0 <main+0x158>
      } else {
	  l++;
 80022ee:	3601      	adds	r6, #1
      }
      //Tdelay3 min 5ms
      delay_ms(6);
 80022f0:	2006      	movs	r0, #6
  spi_send(SPI2, (uint8_t) 0xA0);
  delay_ms (125);			// TDELAY1 min 5 ms
  // Transmit Display Pattern
  k = 0;
  l = 0;
  for (i=0 ; i < 1280 ; i++)
 80022f2:	3401      	adds	r4, #1
	  color = color == 0xFF ? 0x00 : 0xFF;
      } else {
	  l++;
      }
      //Tdelay3 min 5ms
      delay_ms(6);
 80022f4:	f7ff ff2c 	bl	8002150 <delay_ms>
  spi_send(SPI2, (uint8_t) 0xA0);
  delay_ms (125);			// TDELAY1 min 5 ms
  // Transmit Display Pattern
  k = 0;
  l = 0;
  for (i=0 ; i < 1280 ; i++)
 80022f8:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 80022fc:	d003      	beq.n	8002306 <main+0x16e>
 80022fe:	f04f 0800 	mov.w	r8, #0
 8002302:	4647      	mov	r7, r8
 8002304:	e7d1      	b.n	80022aa <main+0x112>
      //Tdelay3 min 5ms
      delay_ms(6);
  }
    //wait for BUSSY
  //while((GPIOA_IDR & GPIO7) == 0 );
  ep_cs(1);
 8002306:	2001      	movs	r0, #1
 8002308:	f7ff ff3a 	bl	8002180 <ep_cs>
  delay_ms (5000);
 800230c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002310:	f7ff ff1e 	bl	8002150 <delay_ms>
    } else {
      gpio_clear(GPIOC, GPIO6);
    }
}
static void epTurnOff(void){
    delay_ms(500);	// TVcc_on > 10 ms PE
 8002314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002318:	f7ff ff1a 	bl	8002150 <delay_ms>
    //turn off EP
    ep_on(0);		// V Chip RESET Set E T Select SETUP get = low get 40% low x TCLK ~60% x TCLK
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff ff24 	bl	800216a <ep_on>
    gpio_clear(GPIOC, GPIO5);
 8002322:	4808      	ldr	r0, [pc, #32]	; (8002344 <main+0x1ac>)
 8002324:	2120      	movs	r1, #32
 8002326:	f000 f965 	bl	80025f4 <gpio_clear>
		 */
		//rx_value = spi_read(SPI2);
		/* printf the byte just received */
		//counter++;
		/* LED on/off */
		gpio_toggle(GPIOC, GPIO1);
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <main+0x1ac>)
 800232c:	2102      	movs	r1, #2
 800232e:	f000 f964 	bl	80025fa <gpio_toggle>
		//uart_printf("Test mode\r\n");
		delay_ms(1000);
 8002332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002336:	f7ff ff0b 	bl	8002150 <delay_ms>
 800233a:	e7f6      	b.n	800232a <main+0x192>
 800233c:	40021018 	.word	0x40021018
 8002340:	4002101c 	.word	0x4002101c
 8002344:	40011000 	.word	0x40011000
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40003800 	.word	0x40003800

08002350 <SendChar>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int SendChar (int ch)  					/* Write character to Serial Port     */
{      
 8002350:	b510      	push	{r4, lr}
 8002352:	4604      	mov	r4, r0
  usart_send_blocking(USART1, (unsigned char) ch);
 8002354:	b2e1      	uxtb	r1, r4
 8002356:	4802      	ldr	r0, [pc, #8]	; (8002360 <SendChar+0x10>)
 8002358:	f000 f9c1 	bl	80026de <usart_send_blocking>
  return (ch);
}
 800235c:	4620      	mov	r0, r4
 800235e:	bd10      	pop	{r4, pc}
 8002360:	40013800 	.word	0x40013800

08002364 <uart_printf>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
 8002364:	b538      	push	{r3, r4, r5, lr}
 8002366:	4605      	mov	r5, r0
 8002368:	2400      	movs	r4, #0
	while (*ptr) {
 800236a:	e001      	b.n	8002370 <uart_printf+0xc>
		SendChar (*ptr);
 800236c:	f7ff fff0 	bl	8002350 <SendChar>
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
	while (*ptr) {
 8002370:	5d28      	ldrb	r0, [r5, r4]
 8002372:	3401      	adds	r4, #1
 8002374:	2800      	cmp	r0, #0
 8002376:	d1f9      	bne.n	800236c <uart_printf+0x8>
		SendChar (*ptr);
		ptr++;	
	}								
}
 8002378:	bd38      	pop	{r3, r4, r5, pc}
 800237a:	bf00      	nop

0800237c <gpio_set_mode>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be set, use logical OR '|' to separate them.
*/

void gpio_set_mode(u32 gpioport, u8 mode, u8 cnf, u16 gpios)
{
 800237c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 8002380:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8002382:	2400      	movs	r4, #0
 8002384:	6845      	ldr	r5, [r0, #4]
 8002386:	46a4      	mov	ip, r4

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
		/* Only set the config if the bit is set in gpios. */
		if (!((1 << i) & gpios))
 8002388:	fa43 f70c 	asr.w	r7, r3, ip
 800238c:	f017 0f01 	tst.w	r7, #1
 8002390:	d021      	beq.n	80023d6 <gpio_set_mode+0x5a>
 8002392:	fa1f f88c 	uxth.w	r8, ip
			continue;

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8002396:	f1b8 0f07 	cmp.w	r8, #7
 800239a:	d802      	bhi.n	80023a2 <gpio_set_mode+0x26>
 800239c:	4627      	mov	r7, r4
 800239e:	46b2      	mov	sl, r6
 80023a0:	e003      	b.n	80023aa <gpio_set_mode+0x2e>
 80023a2:	f1a4 0720 	sub.w	r7, r4, #32
 80023a6:	b2bf      	uxth	r7, r7
 80023a8:	46aa      	mov	sl, r5

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80023aa:	f04f 090f 	mov.w	r9, #15
 80023ae:	fa09 f907 	lsl.w	r9, r9, r7
 80023b2:	ea2a 0a09 	bic.w	sl, sl, r9
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80023b6:	f107 0902 	add.w	r9, r7, #2
 80023ba:	fa02 f909 	lsl.w	r9, r2, r9
 80023be:	fa11 f707 	lsls.w	r7, r1, r7
 80023c2:	ea49 0707 	orr.w	r7, r9, r7
 80023c6:	ea47 070a 	orr.w	r7, r7, sl

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 80023ca:	f1b8 0f08 	cmp.w	r8, #8
 80023ce:	bf28      	it	cs
 80023d0:	463d      	movcs	r5, r7
 80023d2:	bf38      	it	cc
 80023d4:	463e      	movcc	r6, r7
 80023d6:	f10c 0c01 	add.w	ip, ip, #1
 80023da:	3404      	adds	r4, #4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 80023dc:	f1bc 0f10 	cmp.w	ip, #16
		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
		tmp32 |= (mode << offset) | (cnf << (offset + 2));

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 80023e0:	b2a4      	uxth	r4, r4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 80023e2:	d1d1      	bne.n	8002388 <gpio_set_mode+0xc>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 80023e4:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 80023e6:	6045      	str	r5, [r0, #4]
}
 80023e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080023ec <rcc_wait_for_osc_ready>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_wait_for_osc_ready(osc_t osc)
{
	switch (osc) {
 80023ec:	2806      	cmp	r0, #6
 80023ee:	d82e      	bhi.n	800244e <rcc_wait_for_osc_ready+0x62>
 80023f0:	e8df f000 	tbb	[pc, r0]
 80023f4:	16100a04 	.word	0x16100a04
 80023f8:	221c      	.short	0x221c
 80023fa:	28          	.byte	0x28
 80023fb:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <rcc_wait_for_osc_ready+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002404:	d0fa      	beq.n	80023fc <rcc_wait_for_osc_ready+0x10>
 8002406:	4770      	bx	lr
		break;
	case PLL2:
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <rcc_wait_for_osc_ready+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002410:	d0fa      	beq.n	8002408 <rcc_wait_for_osc_ready+0x1c>
 8002412:	4770      	bx	lr
		break;
	case PLL3:
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <rcc_wait_for_osc_ready+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800241c:	d0fa      	beq.n	8002414 <rcc_wait_for_osc_ready+0x28>
 800241e:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <rcc_wait_for_osc_ready+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002428:	d0fa      	beq.n	8002420 <rcc_wait_for_osc_ready+0x34>
 800242a:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <rcc_wait_for_osc_ready+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f013 0f02 	tst.w	r3, #2
 8002434:	d0fa      	beq.n	800242c <rcc_wait_for_osc_ready+0x40>
 8002436:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <rcc_wait_for_osc_ready+0x68>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f013 0f02 	tst.w	r3, #2
 8002440:	d0fa      	beq.n	8002438 <rcc_wait_for_osc_ready+0x4c>
 8002442:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <rcc_wait_for_osc_ready+0x6c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f013 0f02 	tst.w	r3, #2
 800244c:	d0fa      	beq.n	8002444 <rcc_wait_for_osc_ready+0x58>
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	40021020 	.word	0x40021020
 8002458:	40021024 	.word	0x40021024

0800245c <rcc_osc_on>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(osc_t osc)
{
	switch (osc) {
 800245c:	2806      	cmp	r0, #6
 800245e:	d826      	bhi.n	80024ae <rcc_osc_on+0x52>
 8002460:	e8df f000 	tbb	[pc, r0]
 8002464:	130e0904 	.word	0x130e0904
 8002468:	1a18      	.short	0x1a18
 800246a:	20          	.byte	0x20
 800246b:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <rcc_osc_on+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002474:	e014      	b.n	80024a0 <rcc_osc_on+0x44>
		break;
	case PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <rcc_osc_on+0x54>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800247e:	e00f      	b.n	80024a0 <rcc_osc_on+0x44>
		break;
	case PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <rcc_osc_on+0x54>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002488:	e00a      	b.n	80024a0 <rcc_osc_on+0x44>
		break;
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <rcc_osc_on+0x54>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002492:	e005      	b.n	80024a0 <rcc_osc_on+0x44>
		break;
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <rcc_osc_on+0x54>)
 8002496:	e000      	b.n	800249a <rcc_osc_on+0x3e>
		break;
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <rcc_osc_on+0x58>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
		break;
 80024a2:	4770      	bx	lr
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <rcc_osc_on+0x5c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40021020 	.word	0x40021020
 80024b8:	40021024 	.word	0x40021024

080024bc <rcc_peripheral_enable_clock>:
@li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
*/

void rcc_peripheral_enable_clock(volatile u32 *reg, u32 en)
{
	*reg |= en;
 80024bc:	6803      	ldr	r3, [r0, #0]
 80024be:	ea41 0303 	orr.w	r3, r1, r3
 80024c2:	6003      	str	r3, [r0, #0]
}
 80024c4:	4770      	bx	lr

080024c6 <rcc_peripheral_reset>:
@li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
*/

void rcc_peripheral_reset(volatile u32 *reg, u32 reset)
{
	*reg |= reset;
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	ea41 0303 	orr.w	r3, r1, r3
 80024cc:	6003      	str	r3, [r0, #0]
}
 80024ce:	4770      	bx	lr

080024d0 <rcc_peripheral_clear_reset>:
@li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
*/

void rcc_peripheral_clear_reset(volatile u32 *reg, u32 clear_reset)
{
	*reg &= ~clear_reset;
 80024d0:	6803      	ldr	r3, [r0, #0]
 80024d2:	ea23 0301 	bic.w	r3, r3, r1
 80024d6:	6003      	str	r3, [r0, #0]
}
 80024d8:	4770      	bx	lr
	...

080024dc <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(u32 clk)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <rcc_set_sysclk_source+0x10>)
 80024de:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
	RCC_CFGR = (reg32 | clk);
 80024e0:	f022 0203 	bic.w	r2, r2, #3
 80024e4:	ea40 0202 	orr.w	r2, r0, r2
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	4770      	bx	lr
 80024ec:	40021004 	.word	0x40021004

080024f0 <rcc_set_pll_multiplication_factor>:

void rcc_set_pll_multiplication_factor(u32 mul)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <rcc_set_pll_multiplication_factor+0x10>)
 80024f2:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 21) | (1 << 20) | (1 << 19) | (1 << 18));
	RCC_CFGR = (reg32 | (mul << 18));
 80024f4:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80024f8:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	4770      	bx	lr
 8002500:	40021004 	.word	0x40021004

08002504 <rcc_set_pll_source>:

void rcc_set_pll_source(u32 pllsrc)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <rcc_set_pll_source+0x10>)
 8002506:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 16);
	RCC_CFGR = (reg32 | (pllsrc << 16));
 8002508:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800250c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	4770      	bx	lr
 8002514:	40021004 	.word	0x40021004

08002518 <rcc_set_pllxtpre>:

void rcc_set_pllxtpre(u32 pllxtpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <rcc_set_pllxtpre+0x10>)
 800251a:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 17);
	RCC_CFGR = (reg32 | (pllxtpre << 17));
 800251c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002520:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	4770      	bx	lr
 8002528:	40021004 	.word	0x40021004

0800252c <rcc_set_adcpre>:

void rcc_set_adcpre(u32 adcpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <rcc_set_adcpre+0x10>)
 800252e:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 14) | (1 << 15));
	RCC_CFGR = (reg32 | (adcpre << 14));
 8002530:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002534:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	4770      	bx	lr
 800253c:	40021004 	.word	0x40021004

08002540 <rcc_set_ppre1>:

void rcc_set_ppre1(u32 ppre1)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <rcc_set_ppre1+0x10>)
 8002542:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 8) | (1 << 9) | (1 << 10));
	RCC_CFGR = (reg32 | (ppre1 << 8));
 8002544:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002548:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	4770      	bx	lr
 8002550:	40021004 	.word	0x40021004

08002554 <T.0>:

void rcc_set_hpre(u32 hpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <T.0+0xc>)
 8002556:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8002558:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 800255c:	601a      	str	r2, [r3, #0]
}
 800255e:	4770      	bx	lr
 8002560:	40021004 	.word	0x40021004

08002564 <T.1>:

void rcc_set_ppre2(u32 ppre2)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8002564:	4b02      	ldr	r3, [pc, #8]	; (8002570 <T.1+0xc>)
 8002566:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 11) | (1 << 12) | (1 << 13));
 8002568:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
	RCC_CFGR = (reg32 | (ppre2 << 11));
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	4770      	bx	lr
 8002570:	40021004 	.word	0x40021004

08002574 <rcc_clock_setup_in_hse_8mhz_out_24mhz>:
/** @brief RCC Set System Clock PLL at 24MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_24mhz(void)
{
 8002574:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8002576:	2004      	movs	r0, #4
 8002578:	f7ff ff70 	bl	800245c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 800257c:	2004      	movs	r0, #4
 800257e:	f7ff ff35 	bl	80023ec <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff ffaa 	bl	80024dc <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8002588:	2003      	movs	r0, #3
 800258a:	f7ff ff67 	bl	800245c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 800258e:	2003      	movs	r0, #3
 8002590:	f7ff ff2c 	bl	80023ec <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 8002594:	2001      	movs	r0, #1
 8002596:	f7ff ffa1 	bl	80024dc <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 800259a:	f7ff ffdb 	bl	8002554 <T.0>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV2);	/* Set. 12MHz Max. 14MHz */
 800259e:	2000      	movs	r0, #0
 80025a0:	f7ff ffc4 	bl	800252c <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_NODIV);	/* Set. 24MHz Max. 36MHz */
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7ff ffcb 	bl	8002540 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 80025aa:	f7ff ffdb 	bl	8002564 <T.1>
	 * Sysclk runs with 24MHz -> 0 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f000 f8be 	bl	8002730 <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 3.
	 * 8MHz (external) * 3 (multiplier) = 24MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL3);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7ff ff9b 	bl	80024f0 <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff ffa2 	bl	8002504 <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7ff ffa9 	bl	8002518 <rcc_set_pllxtpre>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7ff ff48 	bl	800245c <rcc_osc_on>
	rcc_wait_for_osc_ready(PLL);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff ff0d 	bl	80023ec <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7ff ff82 	bl	80024dc <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ppre1_frequency = 24000000;
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x70>)
 80025da:	4a03      	ldr	r2, [pc, #12]	; (80025e8 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x74>)
 80025dc:	6013      	str	r3, [r2, #0]
	rcc_ppre2_frequency = 24000000;
 80025de:	4a03      	ldr	r2, [pc, #12]	; (80025ec <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x78>)
 80025e0:	6013      	str	r3, [r2, #0]
}
 80025e2:	bd08      	pop	{r3, pc}
 80025e4:	016e3600 	.word	0x016e3600
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004

080025f0 <gpio_set>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void gpio_set(u32 gpioport, u16 gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80025f0:	6101      	str	r1, [r0, #16]
}
 80025f2:	4770      	bx	lr

080025f4 <gpio_clear>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void  gpio_clear(u32 gpioport, u16 gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80025f4:	0409      	lsls	r1, r1, #16
 80025f6:	6101      	str	r1, [r0, #16]
}
 80025f8:	4770      	bx	lr

080025fa <gpio_toggle>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void gpio_toggle(u32 gpioport, u16 gpios)
{
	GPIO_ODR(gpioport) ^= gpios;
 80025fa:	68c3      	ldr	r3, [r0, #12]
 80025fc:	404b      	eors	r3, r1
 80025fe:	60c3      	str	r3, [r0, #12]
}
 8002600:	4770      	bx	lr

08002602 <spi_init_master>:
@param[in] lsbfirst Unsigned int32. Frame format lsb/msb first @ref spi_lsbfirst.
@returns int. Error code.
*/

int spi_init_master(u32 spi, u32 br, u32 cpol, u32 cpha, u32 dff, u32 lsbfirst)
{
 8002602:	b510      	push	{r4, lr}
	u32 reg32 = SPI_CR1(spi);
 8002604:	6804      	ldr	r4, [r0, #0]

	/* Reset all bits omitting SPE, CRCEN and CRCNEXT bits. */
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;

	reg32 |= SPI_CR1_MSTR;	/* Configure SPI as master. */
 8002606:	f041 0104 	orr.w	r1, r1, #4

	reg32 |= br;		/* Set baud rate bits. */
 800260a:	4311      	orrs	r1, r2
int spi_init_master(u32 spi, u32 br, u32 cpol, u32 cpha, u32 dff, u32 lsbfirst)
{
	u32 reg32 = SPI_CR1(spi);

	/* Reset all bits omitting SPE, CRCEN and CRCNEXT bits. */
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;
 800260c:	f404 5c41 	and.w	ip, r4, #12352	; 0x3040
	reg32 |= SPI_CR1_MSTR;	/* Configure SPI as master. */

	reg32 |= br;		/* Set baud rate bits. */
	reg32 |= cpol;		/* Set CPOL value. */
	reg32 |= cpha;		/* Set CPHA value. */
	reg32 |= dff;		/* Set data format (8 or 16 bits). */
 8002610:	9a02      	ldr	r2, [sp, #8]
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;

	reg32 |= SPI_CR1_MSTR;	/* Configure SPI as master. */

	reg32 |= br;		/* Set baud rate bits. */
	reg32 |= cpol;		/* Set CPOL value. */
 8002612:	ea41 0c0c 	orr.w	ip, r1, ip
	reg32 |= cpha;		/* Set CPHA value. */
 8002616:	ea4c 0303 	orr.w	r3, ip, r3
	reg32 |= dff;		/* Set data format (8 or 16 bits). */
 800261a:	4313      	orrs	r3, r2
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 800261c:	9a03      	ldr	r2, [sp, #12]
 800261e:	4313      	orrs	r3, r2

	/* TODO: NSS pin handling. */

	SPI_CR1(spi) = reg32;
 8002620:	6003      	str	r3, [r0, #0]

	return 0; /* TODO */
}
 8002622:	2000      	movs	r0, #0
 8002624:	bd10      	pop	{r4, pc}

08002626 <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(u32 spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 8002626:	6803      	ldr	r3, [r0, #0]
 8002628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262c:	6003      	str	r3, [r0, #0]
}
 800262e:	4770      	bx	lr

08002630 <spi_send>:
*/

void spi_send(u32 spi, u16 data)
{
	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_TXE))
 8002630:	6883      	ldr	r3, [r0, #8]
 8002632:	f013 0f02 	tst.w	r3, #2
 8002636:	d0fb      	beq.n	8002630 <spi_send>
		;

	/* Write data (8 or 16 bits, depending on DFF) into DR. */
	SPI_DR(spi) = data;
 8002638:	60c1      	str	r1, [r0, #12]
}
 800263a:	4770      	bx	lr

0800263c <spi_disable_crc>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_disable_crc(u32 spi)
{
	SPI_CR1(spi) &= ~SPI_CR1_CRCEN;
 800263c:	6803      	ldr	r3, [r0, #0]
 800263e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002642:	6003      	str	r3, [r0, #0]
}
 8002644:	4770      	bx	lr

08002646 <spi_enable_software_slave_management>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable_software_slave_management(u32 spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSM;
 8002646:	6803      	ldr	r3, [r0, #0]
 8002648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264c:	6003      	str	r3, [r0, #0]
}
 800264e:	4770      	bx	lr

08002650 <spi_set_nss_high>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_set_nss_high(u32 spi)
{
	SPI_CR1(spi) |= SPI_CR1_SSI;
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6003      	str	r3, [r0, #0]
}
 8002658:	4770      	bx	lr

0800265a <spi_disable_error_interrupt>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_disable_error_interrupt(u32 spi)
{
	SPI_CR2(spi) &= ~SPI_CR2_ERRIE;
 800265a:	6843      	ldr	r3, [r0, #4]
 800265c:	f023 0320 	bic.w	r3, r3, #32
 8002660:	6043      	str	r3, [r0, #4]
}
 8002662:	4770      	bx	lr

08002664 <spi_reset>:
@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_reset(u32 spi_peripheral)
{
	switch (spi_peripheral) {
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <spi_reset+0x54>)

@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_reset(u32 spi_peripheral)
{
 8002666:	b510      	push	{r4, lr}
	switch (spi_peripheral) {
 8002668:	4298      	cmp	r0, r3
 800266a:	d018      	beq.n	800269e <spi_reset+0x3a>
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <spi_reset+0x58>)
 800266e:	4298      	cmp	r0, r3
 8002670:	d003      	beq.n	800267a <spi_reset+0x16>
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <spi_reset+0x5c>)
 8002674:	4298      	cmp	r0, r3
 8002676:	d11e      	bne.n	80026b6 <spi_reset+0x52>
 8002678:	e008      	b.n	800268c <spi_reset+0x28>
	case SPI1:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_SPI1RST);
 800267a:	4812      	ldr	r0, [pc, #72]	; (80026c4 <spi_reset+0x60>)
 800267c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002680:	f7ff ff21 	bl	80024c6 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_SPI1RST);
 8002684:	480f      	ldr	r0, [pc, #60]	; (80026c4 <spi_reset+0x60>)
 8002686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800268a:	e010      	b.n	80026ae <spi_reset+0x4a>
		break;
	case SPI2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI2RST);
 800268c:	480e      	ldr	r0, [pc, #56]	; (80026c8 <spi_reset+0x64>)
 800268e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002692:	f7ff ff18 	bl	80024c6 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI2RST);
 8002696:	480c      	ldr	r0, [pc, #48]	; (80026c8 <spi_reset+0x64>)
 8002698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800269c:	e007      	b.n	80026ae <spi_reset+0x4a>
		break;
#if defined(STM32F1) || defined(STM32F2) || defined(STM32F3) || defined(STM32F4)
	case SPI3:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
 800269e:	480a      	ldr	r0, [pc, #40]	; (80026c8 <spi_reset+0x64>)
 80026a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a4:	f7ff ff0f 	bl	80024c6 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
 80026a8:	4807      	ldr	r0, [pc, #28]	; (80026c8 <spi_reset+0x64>)
 80026aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
		break;
#endif
	}
}
 80026ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI2RST);
		break;
#if defined(STM32F1) || defined(STM32F2) || defined(STM32F3) || defined(STM32F4)
	case SPI3:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_SPI3RST);
 80026b2:	f7ff bf0d 	b.w	80024d0 <rcc_peripheral_clear_reset>
 80026b6:	bd10      	pop	{r4, pc}
 80026b8:	40003c00 	.word	0x40003c00
 80026bc:	40013000 	.word	0x40013000
 80026c0:	40003800 	.word	0x40003800
 80026c4:	4002100c 	.word	0x4002100c
 80026c8:	40021010 	.word	0x40021010

080026cc <usart_send>:
*/

void usart_send(u32 usart, u16 data)
{
	/* Send data. */
	USART_DR(usart) = (data & USART_DR_MASK);
 80026cc:	05c9      	lsls	r1, r1, #23
 80026ce:	0dc9      	lsrs	r1, r1, #23
 80026d0:	6041      	str	r1, [r0, #4]
}
 80026d2:	4770      	bx	lr

080026d4 <usart_wait_send_ready>:
*/

void usart_wait_send_ready(u32 usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_SR(usart) & USART_SR_TXE) == 0);
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026da:	d0fb      	beq.n	80026d4 <usart_wait_send_ready>
}
 80026dc:	4770      	bx	lr

080026de <usart_send_blocking>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(u32 usart, u16 data)
{
 80026de:	b570      	push	{r4, r5, r6, lr}
 80026e0:	4604      	mov	r4, r0
 80026e2:	460d      	mov	r5, r1
	usart_wait_send_ready(usart);
 80026e4:	f7ff fff6 	bl	80026d4 <usart_wait_send_ready>
	usart_send(usart, data);
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
}
 80026ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
*/

void usart_send_blocking(u32 usart, u16 data)
{
	usart_wait_send_ready(usart);
	usart_send(usart, data);
 80026f0:	f7ff bfec 	b.w	80026cc <usart_send>

080026f4 <blocking_handler>:
	/* Call the application's entry point. */
	main();
}

void blocking_handler(void)
{
 80026f4:	e7fe      	b.n	80026f4 <blocking_handler>

080026f6 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80026f6:	4770      	bx	lr

080026f8 <reset_handler>:

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <reset_handler+0x28>)
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <reset_handler+0x2c>)
 80026fc:	e003      	b.n	8002706 <reset_handler+0xe>
		*dest = *src;
 80026fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8002702:	f843 1b04 	str.w	r1, [r3], #4

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <reset_handler+0x30>)
 8002708:	428b      	cmp	r3, r1
 800270a:	d3f8      	bcc.n	80026fe <reset_handler+0x6>
 800270c:	e002      	b.n	8002714 <reset_handler+0x1c>
		*dest = *src;

	while (dest < &_ebss)
		*dest++ = 0;
 800270e:	2200      	movs	r2, #0
 8002710:	f843 2b04 	str.w	r2, [r3], #4
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
		*dest = *src;

	while (dest < &_ebss)
 8002714:	4a05      	ldr	r2, [pc, #20]	; (800272c <reset_handler+0x34>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d3f9      	bcc.n	800270e <reset_handler+0x16>

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
 800271a:	f7ff bd3d 	b.w	8002198 <main>
 800271e:	bf00      	nop
 8002720:	08002744 	.word	0x08002744
 8002724:	20000000 	.word	0x20000000
 8002728:	20000008 	.word	0x20000008
 800272c:	20000008 	.word	0x20000008

08002730 <flash_set_ws>:

void flash_set_ws(u32 ws)
{
	u32 reg32;

	reg32 = FLASH_ACR;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <flash_set_ws+0x10>)
 8002732:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 8002734:	f022 0207 	bic.w	r2, r2, #7
	reg32 |= ws;
 8002738:	ea40 0202 	orr.w	r2, r0, r2
	FLASH_ACR = reg32;
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	4770      	bx	lr
 8002740:	40022000 	.word	0x40022000
