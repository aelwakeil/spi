
uart.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 40 01 20 65 08 00 08 63 08 00 08 61 08 00 08     .@. e...c...a...
 8000010:	61 08 00 08 61 08 00 08 61 08 00 08 00 00 00 00     a...a...a.......
	...
 800002c:	63 08 00 08 63 08 00 08 00 00 00 00 63 08 00 08     c...c.......c...
 800003c:	63 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     c...a...a...a...
 800004c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800005c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800006c:	61 08 00 08 61 08 00 08 61 08 00 08 8d 04 00 08     a...a...a.......
 800007c:	d5 04 00 08 61 08 00 08 61 08 00 08 61 08 00 08     ....a...a...a...
 800008c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800009c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 80000ac:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 80000bc:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 80000cc:	61 08 00 08 61 08 00 08 3f 03 00 08 61 08 00 08     a...a...?...a...
 80000dc:	11 04 00 08 61 08 00 08 61 08 00 08 61 08 00 08     ....a...a...a...
 80000ec:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 80000fc:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800010c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800011c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800012c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800013c:	61 08 00 08 61 08 00 08 61 08 00 08 61 08 00 08     a...a...a...a...
 800014c:	61 08 00 08                                         a...

08000150 <delay_ms>:
		SendChar (*ptr);
		ptr++;	
	}								
}

void delay_ms(int d){
 8000150:	2300      	movs	r3, #0
    int i,j;
    for (j = 0; j < d; j++){
 8000152:	e007      	b.n	8000164 <delay_ms+0x14>
 8000154:	2200      	movs	r2, #0
	for (i = 0; i < 4700; i++)	/* Wait a bit. */
	      __asm__("nop");
 8000156:	bf00      	nop
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
	for (i = 0; i < 4700; i++)	/* Wait a bit. */
 8000158:	f241 215c 	movw	r1, #4700	; 0x125c
 800015c:	3201      	adds	r2, #1
 800015e:	428a      	cmp	r2, r1
 8000160:	d1f9      	bne.n	8000156 <delay_ms+0x6>
	}								
}

void delay_ms(int d){
    int i,j;
    for (j = 0; j < d; j++){
 8000162:	3301      	adds	r3, #1
 8000164:	4283      	cmp	r3, r0
 8000166:	dbf5      	blt.n	8000154 <delay_ms+0x4>
	for (i = 0; i < 4700; i++)	/* Wait a bit. */
	      __asm__("nop");
    }
}
 8000168:	4770      	bx	lr

0800016a <main>:

int main(void)
{
 800016a:	b510      	push	{r4, lr}
int btBuff_size = 0;
int btBuff_pointer = 0;

static void clock_setup(void)
{
	rcc_clock_setup_in_hse_8mhz_out_24mhz();
 800016c:	f000 fac8 	bl	8000700 <rcc_clock_setup_in_hse_8mhz_out_24mhz>
	/* Enable GPIOA, GPIOB, GPIOC clock. */
	rcc_peripheral_enable_clock(&RCC_APB2ENR,
 8000170:	211c      	movs	r1, #28
 8000172:	485e      	ldr	r0, [pc, #376]	; (80002ec <main+0x182>)
 8000174:	f000 fa72 	bl	800065c <rcc_peripheral_enable_clock>

	/* Enable clocks for GPIO port A (for GPIO_USART1_TX) and USART1. */
	/*rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_IOPAEN |
				    RCC_APB2ENR_AFIOEN | RCC_APB2ENR_USART1EN | RCC_APB1ENR_USART3EN);
*/	
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_USART1EN);
 8000178:	485c      	ldr	r0, [pc, #368]	; (80002ec <main+0x182>)
 800017a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800017e:	f000 fa6d 	bl	800065c <rcc_peripheral_enable_clock>
	rcc_peripheral_enable_clock(&RCC_APB1ENR, RCC_APB1ENR_USART3EN);
 8000182:	485b      	ldr	r0, [pc, #364]	; (80002f0 <main+0x186>)
 8000184:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000188:	f000 fa68 	bl	800065c <rcc_peripheral_enable_clock>
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN);
 800018c:	2105      	movs	r1, #5
 800018e:	4857      	ldr	r0, [pc, #348]	; (80002ec <main+0x182>)
 8000190:	f000 fa64 	bl	800065c <rcc_peripheral_enable_clock>
	/* Enable SPI2 Periph and gpio clocks */
	rcc_peripheral_enable_clock(&RCC_APB1ENR,
 8000194:	4856      	ldr	r0, [pc, #344]	; (80002f0 <main+0x186>)
 8000196:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800019a:	f000 fa5f 	bl	800065c <rcc_peripheral_enable_clock>
}

static void gpio_setup(void)
{
	/* Set GPIO1 (in GPIO port C) to 'output push-pull'. */
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,
 800019e:	2200      	movs	r2, #0
 80001a0:	f241 0317 	movw	r3, #4119	; 0x1017
 80001a4:	2102      	movs	r1, #2
 80001a6:	4853      	ldr	r0, [pc, #332]	; (80002f4 <main+0x18a>)
 80001a8:	f000 f9b8 	bl	800051c <gpio_set_mode>
int main(void)
{
  int c=0;
	clock_setup();
	gpio_setup();
	gpio_set(GPIOC, GPIO0 | GPIO1 | GPIO2);
 80001ac:	2107      	movs	r1, #7
 80001ae:	4851      	ldr	r0, [pc, #324]	; (80002f4 <main+0x18a>)
 80001b0:	f000 faf6 	bl	80007a0 <gpio_set>
	gpio_clear(GPIOC, GPIO0);
 80001b4:	2101      	movs	r1, #1
 80001b6:	484f      	ldr	r0, [pc, #316]	; (80002f4 <main+0x18a>)
 80001b8:	f000 faf4 	bl	80007a4 <gpio_clear>
	//enable bt
	gpio_set(GPIOC, GPIO4 | GPIO12);
 80001bc:	f241 0110 	movw	r1, #4112	; 0x1010
 80001c0:	484c      	ldr	r0, [pc, #304]	; (80002f4 <main+0x18a>)
 80001c2:	f000 faed 	bl	80007a0 <gpio_set>
}

static void usart_setup(void)
{
  	/* Enable the USART1 interrupt. */
	nvic_enable_irq(NVIC_USART1_IRQ);
 80001c6:	2025      	movs	r0, #37	; 0x25
 80001c8:	f000 fb68 	bl	800089c <nvic_enable_irq>
	/* Enable the USART3 interrupt. */
	nvic_enable_irq(NVIC_USART3_IRQ);
 80001cc:	2027      	movs	r0, #39	; 0x27
 80001ce:	f000 fb65 	bl	800089c <nvic_enable_irq>
	
	/* Setup GPIO pin GPIO_USART1_TX and GPIO_USART1_RX. */
	gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_50_MHZ,
 80001d2:	2103      	movs	r1, #3
 80001d4:	2202      	movs	r2, #2
 80001d6:	4848      	ldr	r0, [pc, #288]	; (80002f8 <main+0x18e>)
 80001d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001dc:	f000 f99e 	bl	800051c <gpio_set_mode>
		      GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO_USART1_TX);
	
	gpio_set_mode(GPIOA, GPIO_MODE_INPUT,
 80001e0:	2201      	movs	r2, #1
 80001e2:	2100      	movs	r1, #0
 80001e4:	4844      	ldr	r0, [pc, #272]	; (80002f8 <main+0x18e>)
 80001e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ea:	f000 f997 	bl	800051c <gpio_set_mode>
		      GPIO_CNF_INPUT_FLOAT, GPIO_USART1_RX);
	
	/* Setup UART parameters. */
	//usart_set_baudrate(USART1, 38400);
	USART_BRR(USART1) = (u16)((24000000 << 4) / (115200 * 16));
 80001ee:	4b43      	ldr	r3, [pc, #268]	; (80002fc <main+0x192>)
 80001f0:	24d0      	movs	r4, #208	; 0xd0
 80001f2:	601c      	str	r4, [r3, #0]
	usart_set_databits(USART1, 8);
 80001f4:	2108      	movs	r1, #8
 80001f6:	4842      	ldr	r0, [pc, #264]	; (8000300 <main+0x196>)
 80001f8:	f000 fadb 	bl	80007b2 <usart_set_databits>
	usart_set_stopbits(USART1, USART_STOPBITS_1);
 80001fc:	2100      	movs	r1, #0
 80001fe:	4840      	ldr	r0, [pc, #256]	; (8000300 <main+0x196>)
 8000200:	f000 fae0 	bl	80007c4 <usart_set_stopbits>
	usart_set_mode(USART1, USART_MODE_TX_RX);
 8000204:	483e      	ldr	r0, [pc, #248]	; (8000300 <main+0x196>)
 8000206:	210c      	movs	r1, #12
 8000208:	f000 fae8 	bl	80007dc <usart_set_mode>
	usart_set_parity(USART1, USART_PARITY_NONE);
 800020c:	2100      	movs	r1, #0
 800020e:	483c      	ldr	r0, [pc, #240]	; (8000300 <main+0x196>)
 8000210:	f000 fade 	bl	80007d0 <usart_set_parity>
	usart_set_flow_control(USART1, USART_FLOWCONTROL_NONE);
 8000214:	2100      	movs	r1, #0
 8000216:	483a      	ldr	r0, [pc, #232]	; (8000300 <main+0x196>)
 8000218:	f000 fae6 	bl	80007e8 <usart_set_flow_control>
	
	usart_disable_error_interrupt(USART1);
 800021c:	4838      	ldr	r0, [pc, #224]	; (8000300 <main+0x196>)
 800021e:	f000 fb1a 	bl	8000856 <usart_disable_error_interrupt>
	usart_enable_rx_interrupt(USART1);
 8000222:	4837      	ldr	r0, [pc, #220]	; (8000300 <main+0x196>)
 8000224:	f000 fb0d 	bl	8000842 <usart_enable_rx_interrupt>
	usart_enable_tx_interrupt(USART1);	
 8000228:	4835      	ldr	r0, [pc, #212]	; (8000300 <main+0x196>)
 800022a:	f000 fb0f 	bl	800084c <usart_enable_tx_interrupt>
	/* Finally enable the USART. */
	usart_enable(USART1);
 800022e:	4834      	ldr	r0, [pc, #208]	; (8000300 <main+0x196>)
 8000230:	f000 fae0 	bl	80007f4 <usart_enable>

	///////////////////////////////////////////////////////////////

	
	/* Setup GPIO pin GPIO_USART3_TX and GPIO_USART3_RX. */
	AFIO_MAPR |= AFIO_MAPR_USART3_REMAP_PARTIAL_REMAP;
 8000234:	4b33      	ldr	r3, [pc, #204]	; (8000304 <main+0x19a>)
	/* RESET */
	gpio_set(GPIOC, GPIO12);
 8000236:	482f      	ldr	r0, [pc, #188]	; (80002f4 <main+0x18a>)

	///////////////////////////////////////////////////////////////

	
	/* Setup GPIO pin GPIO_USART3_TX and GPIO_USART3_RX. */
	AFIO_MAPR |= AFIO_MAPR_USART3_REMAP_PARTIAL_REMAP;
 8000238:	681a      	ldr	r2, [r3, #0]
	/* RESET */
	gpio_set(GPIOC, GPIO12);
 800023a:	f44f 5180 	mov.w	r1, #4096	; 0x1000

	///////////////////////////////////////////////////////////////

	
	/* Setup GPIO pin GPIO_USART3_TX and GPIO_USART3_RX. */
	AFIO_MAPR |= AFIO_MAPR_USART3_REMAP_PARTIAL_REMAP;
 800023e:	f042 0210 	orr.w	r2, r2, #16
 8000242:	601a      	str	r2, [r3, #0]
	/* RESET */
	gpio_set(GPIOC, GPIO12);
 8000244:	f000 faac 	bl	80007a0 <gpio_set>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,
 8000248:	2102      	movs	r1, #2
 800024a:	2201      	movs	r2, #1
 800024c:	4829      	ldr	r0, [pc, #164]	; (80002f4 <main+0x18a>)
 800024e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000252:	f000 f963 	bl	800051c <gpio_set_mode>
			GPIO_CNF_OUTPUT_OPENDRAIN, GPIO12);

	/* TX */
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_50_MHZ,
 8000256:	2103      	movs	r1, #3
 8000258:	2202      	movs	r2, #2
 800025a:	4826      	ldr	r0, [pc, #152]	; (80002f4 <main+0x18a>)
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	f000 f95c 	bl	800051c <gpio_set_mode>
			GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO10);
	/* RX */
	gpio_set_mode(GPIOC, GPIO_MODE_INPUT,
 8000264:	2100      	movs	r1, #0
 8000266:	2201      	movs	r2, #1
 8000268:	4822      	ldr	r0, [pc, #136]	; (80002f4 <main+0x18a>)
 800026a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800026e:	f000 f955 	bl	800051c <gpio_set_mode>
			GPIO_CNF_INPUT_FLOAT, GPIO11);

	/* CTS */
	gpio_set_mode(GPIOB, GPIO_MODE_INPUT,
 8000272:	2100      	movs	r1, #0
 8000274:	2202      	movs	r2, #2
 8000276:	4824      	ldr	r0, [pc, #144]	; (8000308 <main+0x19e>)
 8000278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800027c:	f000 f94e 	bl	800051c <gpio_set_mode>
			GPIO_CNF_INPUT_PULL_UPDOWN, GPIO8);
	/* RTS */
	gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_50_MHZ,
 8000280:	2202      	movs	r2, #2
 8000282:	2103      	movs	r1, #3
 8000284:	4820      	ldr	r0, [pc, #128]	; (8000308 <main+0x19e>)
 8000286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800028a:	f000 f947 	bl	800051c <gpio_set_mode>
	gpio_set_mode(GPIOC, GPIO_MODE_INPUT,
		      GPIO_CNF_INPUT_FLOAT, GPIO_USART3_PR_RX);
	*/	      
	/* Setup UART parameters. */
	//usart_set_baudrate(USART3, 38400);
	USART_BRR(USART3) = (u16)((24000000 << 4) / (115200 * 16));
 800028e:	4b1f      	ldr	r3, [pc, #124]	; (800030c <main+0x1a2>)
	usart_set_databits(USART3, 8);
 8000290:	2108      	movs	r1, #8
	gpio_set_mode(GPIOC, GPIO_MODE_INPUT,
		      GPIO_CNF_INPUT_FLOAT, GPIO_USART3_PR_RX);
	*/	      
	/* Setup UART parameters. */
	//usart_set_baudrate(USART3, 38400);
	USART_BRR(USART3) = (u16)((24000000 << 4) / (115200 * 16));
 8000292:	601c      	str	r4, [r3, #0]
	usart_set_databits(USART3, 8);
 8000294:	481e      	ldr	r0, [pc, #120]	; (8000310 <main+0x1a6>)
 8000296:	f000 fa8c 	bl	80007b2 <usart_set_databits>
	usart_set_stopbits(USART3, USART_STOPBITS_1);
 800029a:	2100      	movs	r1, #0
 800029c:	481c      	ldr	r0, [pc, #112]	; (8000310 <main+0x1a6>)
 800029e:	f000 fa91 	bl	80007c4 <usart_set_stopbits>
	usart_set_mode(USART3, USART_MODE_TX_RX);
 80002a2:	210c      	movs	r1, #12
 80002a4:	481a      	ldr	r0, [pc, #104]	; (8000310 <main+0x1a6>)
 80002a6:	f000 fa99 	bl	80007dc <usart_set_mode>
	usart_set_parity(USART3, USART_PARITY_NONE);
 80002aa:	2100      	movs	r1, #0
 80002ac:	4818      	ldr	r0, [pc, #96]	; (8000310 <main+0x1a6>)
 80002ae:	f000 fa8f 	bl	80007d0 <usart_set_parity>
	usart_set_flow_control(USART3, USART_FLOWCONTROL_NONE);
 80002b2:	2100      	movs	r1, #0
 80002b4:	4816      	ldr	r0, [pc, #88]	; (8000310 <main+0x1a6>)
 80002b6:	f000 fa97 	bl	80007e8 <usart_set_flow_control>
	
	usart_disable_error_interrupt(USART3);
 80002ba:	4815      	ldr	r0, [pc, #84]	; (8000310 <main+0x1a6>)
 80002bc:	f000 facb 	bl	8000856 <usart_disable_error_interrupt>
	usart_enable_rx_interrupt(USART3);
 80002c0:	4813      	ldr	r0, [pc, #76]	; (8000310 <main+0x1a6>)
 80002c2:	f000 fabe 	bl	8000842 <usart_enable_rx_interrupt>
	usart_enable_tx_interrupt(USART3);
 80002c6:	4812      	ldr	r0, [pc, #72]	; (8000310 <main+0x1a6>)
 80002c8:	f000 fac0 	bl	800084c <usart_enable_tx_interrupt>
	/* Enable USART3 Receive interrupt. */
	//USART_CR1(USART3) |= USART_CR1_RXNEIE;
	
	/* Finally enable the USART. */
	usart_enable(USART3);
 80002cc:	4810      	ldr	r0, [pc, #64]	; (8000310 <main+0x1a6>)
 80002ce:	f000 fa91 	bl	80007f4 <usart_enable>
	//enable bt
	gpio_set(GPIOC, GPIO4 | GPIO12);
	usart_setup();
	
		
	gpio_clear(GPIOC, GPIO0 | GPIO1 | GPIO2);
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <main+0x18a>)
 80002d4:	2107      	movs	r1, #7
 80002d6:	f000 fa65 	bl	80007a4 <gpio_clear>
		//rx_value = spi_read(SPI2);
		/* LED on/off */
		if(c%5 == 0){
		  //uart_printf("still here\r\n");
		}
		gpio_toggle(GPIOC, GPIO1);
 80002da:	4806      	ldr	r0, [pc, #24]	; (80002f4 <main+0x18a>)
 80002dc:	2102      	movs	r1, #2
 80002de:	f000 fa64 	bl	80007aa <gpio_toggle>
		delay_ms(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e6:	f7ff ff33 	bl	8000150 <delay_ms>
 80002ea:	e7f6      	b.n	80002da <main+0x170>
 80002ec:	40021018 	.word	0x40021018
 80002f0:	4002101c 	.word	0x4002101c
 80002f4:	40011000 	.word	0x40011000
 80002f8:	40010800 	.word	0x40010800
 80002fc:	40013808 	.word	0x40013808
 8000300:	40013800 	.word	0x40013800
 8000304:	40010004 	.word	0x40010004
 8000308:	40010c00 	.word	0x40010c00
 800030c:	40004808 	.word	0x40004808
 8000310:	40004800 	.word	0x40004800

08000314 <SendChar>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int SendChar (int ch)  					/* Write character to Serial Port     */
{      
 8000314:	b510      	push	{r4, lr}
 8000316:	4604      	mov	r4, r0
  usart_send_blocking(USART1, (unsigned char) ch);
 8000318:	b2e1      	uxtb	r1, r4
 800031a:	4802      	ldr	r0, [pc, #8]	; (8000324 <SendChar+0x10>)
 800031c:	f000 fa7c 	bl	8000818 <usart_send_blocking>
  return (ch);
}
 8000320:	4620      	mov	r0, r4
 8000322:	bd10      	pop	{r4, pc}
 8000324:	40013800 	.word	0x40013800

08000328 <uart_printf>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
 8000328:	b538      	push	{r3, r4, r5, lr}
 800032a:	4605      	mov	r5, r0
 800032c:	2400      	movs	r4, #0
	while (*ptr) {
 800032e:	e001      	b.n	8000334 <uart_printf+0xc>
		SendChar (*ptr);
 8000330:	f7ff fff0 	bl	8000314 <SendChar>
* Output         : None
* Return         : None
*******************************************************************************/
void uart_printf (char *ptr)
{
	while (*ptr) {
 8000334:	5d28      	ldrb	r0, [r5, r4]
 8000336:	3401      	adds	r4, #1
 8000338:	2800      	cmp	r0, #0
 800033a:	d1f9      	bne.n	8000330 <uart_printf+0x8>
		SendChar (*ptr);
		ptr++;	
	}								
}
 800033c:	bd38      	pop	{r3, r4, r5, pc}

0800033e <usart1_isr>:
void usart1_isr(void)
{

      u8 newdata;
	/* Check if we were called because of RXNE. */
	if (((USART_CR1(USART1) & USART_CR1_RXNEIE) != 0) &&
 800033e:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <usart1_isr+0xba>)
		/* Disable the TXE interrupt as we don't need it anymore. */
		USART_CR1(USART3) &= ~USART_CR1_TXEIE;
	}
}
void usart1_isr(void)
{
 8000340:	b570      	push	{r4, r5, r6, lr}

      u8 newdata;
	/* Check if we were called because of RXNE. */
	if (((USART_CR1(USART1) & USART_CR1_RXNEIE) != 0) &&
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f013 0f20 	tst.w	r3, #32
 8000348:	d02f      	beq.n	80003aa <usart1_isr+0x6c>
	    ((USART_SR(USART1) & USART_SR_RXNE) != 0)) {
 800034a:	4e2c      	ldr	r6, [pc, #176]	; (80003fc <usart1_isr+0xbe>)
 800034c:	6833      	ldr	r3, [r6, #0]
void usart1_isr(void)
{

      u8 newdata;
	/* Check if we were called because of RXNE. */
	if (((USART_CR1(USART1) & USART_CR1_RXNEIE) != 0) &&
 800034e:	f013 0f20 	tst.w	r3, #32
 8000352:	d02a      	beq.n	80003aa <usart1_isr+0x6c>
	    ((USART_SR(USART1) & USART_SR_RXNE) != 0)) {

		
		  /* Indicate that we are sending data. */
		  gpio_toggle(GPIOC, GPIO0);
 8000354:	2101      	movs	r1, #1
 8000356:	482a      	ldr	r0, [pc, #168]	; (8000400 <usart1_isr+0xc2>)
 8000358:	f000 fa27 	bl	80007aa <gpio_toggle>
		newdata = usart_recv(USART1);
 800035c:	4630      	mov	r0, r6
 800035e:	f000 fa52 	bl	8000806 <usart_recv>
 8000362:	b2c5      	uxtb	r5, r0
		usart_send_blocking(USART1, newdata);
 8000364:	4629      	mov	r1, r5
 8000366:	4630      	mov	r0, r6
 8000368:	f000 fa56 	bl	8000818 <usart_send_blocking>
		if(newdata == 13){
 800036c:	2d0d      	cmp	r5, #13
 800036e:	4c25      	ldr	r4, [pc, #148]	; (8000404 <usart1_isr+0xc6>)
 8000370:	d111      	bne.n	8000396 <usart1_isr+0x58>
		  usart_send_blocking(USART1, '\n');
 8000372:	210a      	movs	r1, #10
 8000374:	4630      	mov	r0, r6
 8000376:	f000 fa4f 	bl	8000818 <usart_send_blocking>
		  USART_CR1(USART3) |= USART_CR1_TXEIE;
 800037a:	4b23      	ldr	r3, [pc, #140]	; (8000408 <usart1_isr+0xca>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000382:	601a      	str	r2, [r3, #0]
		  if(btBuff_size > 0 && btBuff[btBuff_size-1] != '$'){
 8000384:	6823      	ldr	r3, [r4, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	dd0f      	ble.n	80003aa <usart1_isr+0x6c>
 800038a:	191a      	adds	r2, r3, r4
 800038c:	78d1      	ldrb	r1, [r2, #3]
 800038e:	2924      	cmp	r1, #36	; 0x24
 8000390:	d00b      	beq.n	80003aa <usart1_isr+0x6c>
		    btBuff[btBuff_size] = newdata;
 8000392:	7115      	strb	r5, [r2, #4]
 8000394:	e005      	b.n	80003a2 <usart1_isr+0x64>
		    btBuff_size++;
		  }
		} else {
		  btBuff[btBuff_size] = newdata;
 8000396:	6823      	ldr	r3, [r4, #0]
 8000398:	191a      	adds	r2, r3, r4
		  if(btBuff_size < 1024){
 800039a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		  if(btBuff_size > 0 && btBuff[btBuff_size-1] != '$'){
		    btBuff[btBuff_size] = newdata;
		    btBuff_size++;
		  }
		} else {
		  btBuff[btBuff_size] = newdata;
 800039e:	7115      	strb	r5, [r2, #4]
		  if(btBuff_size < 1024){
 80003a0:	da01      	bge.n	80003a6 <usart1_isr+0x68>
		    btBuff_size++;
 80003a2:	3301      	adds	r3, #1
 80003a4:	e000      	b.n	80003a8 <usart1_isr+0x6a>
		  } else {
		    btBuff_size = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	6023      	str	r3, [r4, #0]
		  }
		}
	}

	/* Check if we were called because of TXE. */
	if (((USART_CR1(USART1) & USART_CR1_TXEIE) != 0) &&
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <usart1_isr+0xba>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80003b2:	d01f      	beq.n	80003f4 <usart1_isr+0xb6>
	    ((USART_SR(USART1) & USART_SR_TXE) != 0)) {
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <usart1_isr+0xbe>)
 80003b6:	681b      	ldr	r3, [r3, #0]
		  }
		}
	}

	/* Check if we were called because of TXE. */
	if (((USART_CR1(USART1) & USART_CR1_TXEIE) != 0) &&
 80003b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80003bc:	d01a      	beq.n	80003f4 <usart1_isr+0xb6>
 80003be:	2400      	movs	r4, #0
 80003c0:	e00b      	b.n	80003da <usart1_isr+0x9c>

		/* Put data into the transmit register. */
		for(int i=0;i<data_size;i++){
		  /* Indicate that we are sending out data. */
		  gpio_toggle(GPIOA, GPIO1);
		  usart_send_blocking(USART1, data[i]);
 80003c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
		

		/* Put data into the transmit register. */
		for(int i=0;i<data_size;i++){
		  /* Indicate that we are sending out data. */
		  gpio_toggle(GPIOA, GPIO1);
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <usart1_isr+0xce>)
 80003c8:	2102      	movs	r1, #2
		  usart_send_blocking(USART1, data[i]);
 80003ca:	3504      	adds	r5, #4
		

		/* Put data into the transmit register. */
		for(int i=0;i<data_size;i++){
		  /* Indicate that we are sending out data. */
		  gpio_toggle(GPIOA, GPIO1);
 80003cc:	f000 f9ed 	bl	80007aa <gpio_toggle>
		  usart_send_blocking(USART1, data[i]);
 80003d0:	5d29      	ldrb	r1, [r5, r4]
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <usart1_isr+0xbe>)
 80003d4:	f000 fa20 	bl	8000818 <usart_send_blocking>
	    ((USART_SR(USART1) & USART_SR_TXE) != 0)) {

		

		/* Put data into the transmit register. */
		for(int i=0;i<data_size;i++){
 80003d8:	3401      	adds	r4, #1
 80003da:	4d0a      	ldr	r5, [pc, #40]	; (8000404 <usart1_isr+0xc6>)
 80003dc:	f8d5 3438 	ldr.w	r3, [r5, #1080]	; 0x438
 80003e0:	429c      	cmp	r4, r3
 80003e2:	dbee      	blt.n	80003c2 <usart1_isr+0x84>
		  /* Indicate that we are sending out data. */
		  gpio_toggle(GPIOA, GPIO1);
		  usart_send_blocking(USART1, data[i]);
		}
		data_size = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	f8c5 3438 	str.w	r3, [r5, #1080]	; 0x438
		/* Disable the TXE interrupt as we don't need it anymore. */
		USART_CR1(USART1) &= ~USART_CR1_TXEIE;
 80003ea:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <usart1_isr+0xba>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	bf00      	nop
 80003f8:	4001380c 	.word	0x4001380c
 80003fc:	40013800 	.word	0x40013800
 8000400:	40011000 	.word	0x40011000
 8000404:	20000008 	.word	0x20000008
 8000408:	4000480c 	.word	0x4000480c
 800040c:	40010800 	.word	0x40010800

08000410 <usart3_isr>:

void usart3_isr(void)
{
    u8 newdata;
	/* Check if we were called because of RXNE. */
	if (((USART_CR1(USART3) & USART_CR1_RXNEIE) != 0) &&
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <usart3_isr+0x68>)
}



void usart3_isr(void)
{
 8000412:	b510      	push	{r4, lr}
    u8 newdata;
	/* Check if we were called because of RXNE. */
	if (((USART_CR1(USART3) & USART_CR1_RXNEIE) != 0) &&
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f013 0f20 	tst.w	r3, #32
 800041a:	d00f      	beq.n	800043c <usart3_isr+0x2c>
	    ((USART_SR(USART3) & USART_SR_RXNE) != 0)) {
 800041c:	4c17      	ldr	r4, [pc, #92]	; (800047c <usart3_isr+0x6c>)
 800041e:	6823      	ldr	r3, [r4, #0]

void usart3_isr(void)
{
    u8 newdata;
	/* Check if we were called because of RXNE. */
	if (((USART_CR1(USART3) & USART_CR1_RXNEIE) != 0) &&
 8000420:	f013 0f20 	tst.w	r3, #32
 8000424:	d00a      	beq.n	800043c <usart3_isr+0x2c>
	    ((USART_SR(USART3) & USART_SR_RXNE) != 0)) {

		/* Indicate that we got data. */
		gpio_toggle(GPIOC, GPIO2);
 8000426:	2104      	movs	r1, #4
 8000428:	4815      	ldr	r0, [pc, #84]	; (8000480 <usart3_isr+0x70>)
 800042a:	f000 f9be 	bl	80007aa <gpio_toggle>
	
		/* Retrieve the data from the peripheral. */
		newdata = usart_recv(USART3);
 800042e:	4620      	mov	r0, r4
 8000430:	f000 f9e9 	bl	8000806 <usart_recv>
		usart_send_blocking(USART1, newdata);
 8000434:	b2c1      	uxtb	r1, r0
 8000436:	4813      	ldr	r0, [pc, #76]	; (8000484 <usart3_isr+0x74>)
 8000438:	f000 f9ee 	bl	8000818 <usart_send_blocking>
		}*/
		/* Enable transmit interrupt so it sends back the data. */
		//USART_CR1(USART1) |= USART_CR1_TXEIE;
	}

	if (((USART_CR1(USART3) & USART_CR1_TXEIE) != 0) &&
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <usart3_isr+0x68>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000444:	d017      	beq.n	8000476 <usart3_isr+0x66>
	    ((USART_SR(USART3) & USART_SR_TXE) != 0)) {
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <usart3_isr+0x6c>)
 8000448:	681b      	ldr	r3, [r3, #0]
		}*/
		/* Enable transmit interrupt so it sends back the data. */
		//USART_CR1(USART1) |= USART_CR1_TXEIE;
	}

	if (((USART_CR1(USART3) & USART_CR1_TXEIE) != 0) &&
 800044a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800044e:	d012      	beq.n	8000476 <usart3_isr+0x66>
 8000450:	2400      	movs	r4, #0
 8000452:	e005      	b.n	8000460 <usart3_isr+0x50>
		/* Indicate that we are sending out data. */
		// gpio_toggle(GPIOA, GPIO7);

		/* Put data into the transmit register. */
		for(int i=0;i<btBuff_size;i++){
		  usart_send_blocking(USART3, btBuff[i]);
 8000454:	3304      	adds	r3, #4
 8000456:	5d19      	ldrb	r1, [r3, r4]
 8000458:	4808      	ldr	r0, [pc, #32]	; (800047c <usart3_isr+0x6c>)
 800045a:	f000 f9dd 	bl	8000818 <usart_send_blocking>

		/* Indicate that we are sending out data. */
		// gpio_toggle(GPIOA, GPIO7);

		/* Put data into the transmit register. */
		for(int i=0;i<btBuff_size;i++){
 800045e:	3401      	adds	r4, #1
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <usart3_isr+0x78>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4294      	cmp	r4, r2
 8000466:	dbf5      	blt.n	8000454 <usart3_isr+0x44>
		  usart_send_blocking(USART3, btBuff[i]);
		}
		btBuff_size = 0;
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
		/* Disable the TXE interrupt as we don't need it anymore. */
		USART_CR1(USART3) &= ~USART_CR1_TXEIE;
 800046c:	4b02      	ldr	r3, [pc, #8]	; (8000478 <usart3_isr+0x68>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	bd10      	pop	{r4, pc}
 8000478:	4000480c 	.word	0x4000480c
 800047c:	40004800 	.word	0x40004800
 8000480:	40011000 	.word	0x40011000
 8000484:	40013800 	.word	0x40013800
 8000488:	20000008 	.word	0x20000008

0800048c <dma1_channel4_isr>:

volatile int received = 0;

void dma1_channel4_isr(void)
{
	if ((DMA1_ISR &DMA_ISR_TCIF4) != 0) {
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <dma1_channel4_isr+0x38>)
}

volatile int received = 0;

void dma1_channel4_isr(void)
{
 800048e:	b510      	push	{r4, lr}
	if ((DMA1_ISR &DMA_ISR_TCIF4) != 0) {
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000496:	d008      	beq.n	80004aa <dma1_channel4_isr+0x1e>
		DMA1_IFCR |= DMA_IFCR_CTCIF5;
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <dma1_channel4_isr+0x3c>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004a0:	601a      	str	r2, [r3, #0]

		received = 1;
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <dma1_channel4_isr+0x40>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	}

	dma_disable_transfer_complete_interrupt(DMA1, DMA_CHANNEL4);
 80004aa:	2104      	movs	r1, #4
 80004ac:	4805      	ldr	r0, [pc, #20]	; (80004c4 <dma1_channel4_isr+0x38>)
 80004ae:	f000 f965 	bl	800077c <dma_disable_transfer_complete_interrupt>

	usart_disable_rx_dma(USART1);
 80004b2:	4807      	ldr	r0, [pc, #28]	; (80004d0 <dma1_channel4_isr+0x44>)
 80004b4:	f000 f9bb 	bl	800082e <usart_disable_rx_dma>

	dma_disable_channel(DMA1, DMA_CHANNEL4);
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <dma1_channel4_isr+0x38>)
 80004ba:	2104      	movs	r1, #4
}
 80004bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	dma_disable_transfer_complete_interrupt(DMA1, DMA_CHANNEL4);

	usart_disable_rx_dma(USART1);

	dma_disable_channel(DMA1, DMA_CHANNEL4);
 80004c0:	f000 b965 	b.w	800078e <dma_disable_channel>
 80004c4:	40020000 	.word	0x40020000
 80004c8:	40020004 	.word	0x40020004
 80004cc:	20000008 	.word	0x20000008
 80004d0:	40013800 	.word	0x40013800

080004d4 <dma1_channel5_isr>:

volatile int transfered = 0;

void dma1_channel5_isr(void)
{
	if ((DMA1_ISR &DMA_ISR_TCIF7) != 0) {
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <dma1_channel5_isr+0x38>)
}

volatile int transfered = 0;

void dma1_channel5_isr(void)
{
 80004d6:	b510      	push	{r4, lr}
	if ((DMA1_ISR &DMA_ISR_TCIF7) != 0) {
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80004de:	d008      	beq.n	80004f2 <dma1_channel5_isr+0x1e>
		DMA1_IFCR |= DMA_IFCR_CTCIF5;
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <dma1_channel5_isr+0x3c>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004e8:	601a      	str	r2, [r3, #0]

		transfered = 1;
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <dma1_channel5_isr+0x40>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	}

	dma_disable_transfer_complete_interrupt(DMA1, DMA_CHANNEL4);
 80004f2:	2104      	movs	r1, #4
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <dma1_channel5_isr+0x38>)
 80004f6:	f000 f941 	bl	800077c <dma_disable_transfer_complete_interrupt>

	usart_disable_tx_dma(USART1);
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <dma1_channel5_isr+0x44>)
 80004fc:	f000 f99c 	bl	8000838 <usart_disable_tx_dma>

	dma_disable_channel(DMA1, DMA_CHANNEL4);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <dma1_channel5_isr+0x38>)
 8000502:	2104      	movs	r1, #4
}
 8000504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	dma_disable_transfer_complete_interrupt(DMA1, DMA_CHANNEL4);

	usart_disable_tx_dma(USART1);

	dma_disable_channel(DMA1, DMA_CHANNEL4);
 8000508:	f000 b941 	b.w	800078e <dma_disable_channel>
 800050c:	40020000 	.word	0x40020000
 8000510:	40020004 	.word	0x40020004
 8000514:	20000008 	.word	0x20000008
 8000518:	40013800 	.word	0x40013800

0800051c <gpio_set_mode>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be set, use logical OR '|' to separate them.
*/

void gpio_set_mode(u32 gpioport, u8 mode, u8 cnf, u16 gpios)
{
 800051c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 8000520:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8000522:	2400      	movs	r4, #0
 8000524:	6845      	ldr	r5, [r0, #4]
 8000526:	46a4      	mov	ip, r4

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
		/* Only set the config if the bit is set in gpios. */
		if (!((1 << i) & gpios))
 8000528:	fa43 f70c 	asr.w	r7, r3, ip
 800052c:	f017 0f01 	tst.w	r7, #1
 8000530:	d021      	beq.n	8000576 <gpio_set_mode+0x5a>
 8000532:	fa1f f88c 	uxth.w	r8, ip
			continue;

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000536:	f1b8 0f07 	cmp.w	r8, #7
 800053a:	d802      	bhi.n	8000542 <gpio_set_mode+0x26>
 800053c:	4627      	mov	r7, r4
 800053e:	46b2      	mov	sl, r6
 8000540:	e003      	b.n	800054a <gpio_set_mode+0x2e>
 8000542:	f1a4 0720 	sub.w	r7, r4, #32
 8000546:	b2bf      	uxth	r7, r7
 8000548:	46aa      	mov	sl, r5

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 800054a:	f04f 090f 	mov.w	r9, #15
 800054e:	fa09 f907 	lsl.w	r9, r9, r7
 8000552:	ea2a 0a09 	bic.w	sl, sl, r9
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000556:	f107 0902 	add.w	r9, r7, #2
 800055a:	fa02 f909 	lsl.w	r9, r2, r9
 800055e:	fa11 f707 	lsls.w	r7, r1, r7
 8000562:	ea49 0707 	orr.w	r7, r9, r7
 8000566:	ea47 070a 	orr.w	r7, r7, sl

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 800056a:	f1b8 0f08 	cmp.w	r8, #8
 800056e:	bf28      	it	cs
 8000570:	463d      	movcs	r5, r7
 8000572:	bf38      	it	cc
 8000574:	463e      	movcc	r6, r7
 8000576:	f10c 0c01 	add.w	ip, ip, #1
 800057a:	3404      	adds	r4, #4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 800057c:	f1bc 0f10 	cmp.w	ip, #16
		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
		tmp32 |= (mode << offset) | (cnf << (offset + 2));

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 8000580:	b2a4      	uxth	r4, r4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 8000582:	d1d1      	bne.n	8000528 <gpio_set_mode+0xc>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 8000584:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8000586:	6045      	str	r5, [r0, #4]
}
 8000588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800058c <rcc_wait_for_osc_ready>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_wait_for_osc_ready(osc_t osc)
{
	switch (osc) {
 800058c:	2806      	cmp	r0, #6
 800058e:	d82e      	bhi.n	80005ee <rcc_wait_for_osc_ready+0x62>
 8000590:	e8df f000 	tbb	[pc, r0]
 8000594:	16100a04 	.word	0x16100a04
 8000598:	221c      	.short	0x221c
 800059a:	28          	.byte	0x28
 800059b:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <rcc_wait_for_osc_ready+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80005a4:	d0fa      	beq.n	800059c <rcc_wait_for_osc_ready+0x10>
 80005a6:	4770      	bx	lr
		break;
	case PLL2:
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <rcc_wait_for_osc_ready+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80005b0:	d0fa      	beq.n	80005a8 <rcc_wait_for_osc_ready+0x1c>
 80005b2:	4770      	bx	lr
		break;
	case PLL3:
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <rcc_wait_for_osc_ready+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80005bc:	d0fa      	beq.n	80005b4 <rcc_wait_for_osc_ready+0x28>
 80005be:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <rcc_wait_for_osc_ready+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005c8:	d0fa      	beq.n	80005c0 <rcc_wait_for_osc_ready+0x34>
 80005ca:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <rcc_wait_for_osc_ready+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f013 0f02 	tst.w	r3, #2
 80005d4:	d0fa      	beq.n	80005cc <rcc_wait_for_osc_ready+0x40>
 80005d6:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <rcc_wait_for_osc_ready+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f013 0f02 	tst.w	r3, #2
 80005e0:	d0fa      	beq.n	80005d8 <rcc_wait_for_osc_ready+0x4c>
 80005e2:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <rcc_wait_for_osc_ready+0x6c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f013 0f02 	tst.w	r3, #2
 80005ec:	d0fa      	beq.n	80005e4 <rcc_wait_for_osc_ready+0x58>
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40021020 	.word	0x40021020
 80005f8:	40021024 	.word	0x40021024

080005fc <rcc_osc_on>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(osc_t osc)
{
	switch (osc) {
 80005fc:	2806      	cmp	r0, #6
 80005fe:	d826      	bhi.n	800064e <rcc_osc_on+0x52>
 8000600:	e8df f000 	tbb	[pc, r0]
 8000604:	130e0904 	.word	0x130e0904
 8000608:	1a18      	.short	0x1a18
 800060a:	20          	.byte	0x20
 800060b:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <rcc_osc_on+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000614:	e014      	b.n	8000640 <rcc_osc_on+0x44>
		break;
	case PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <rcc_osc_on+0x54>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800061e:	e00f      	b.n	8000640 <rcc_osc_on+0x44>
		break;
	case PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <rcc_osc_on+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000628:	e00a      	b.n	8000640 <rcc_osc_on+0x44>
		break;
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <rcc_osc_on+0x54>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000632:	e005      	b.n	8000640 <rcc_osc_on+0x44>
		break;
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <rcc_osc_on+0x54>)
 8000636:	e000      	b.n	800063a <rcc_osc_on+0x3e>
		break;
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <rcc_osc_on+0x58>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	f042 0201 	orr.w	r2, r2, #1
 8000640:	601a      	str	r2, [r3, #0]
		break;
 8000642:	4770      	bx	lr
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <rcc_osc_on+0x5c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	f042 0201 	orr.w	r2, r2, #1
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40021020 	.word	0x40021020
 8000658:	40021024 	.word	0x40021024

0800065c <rcc_peripheral_enable_clock>:
@li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
*/

void rcc_peripheral_enable_clock(volatile u32 *reg, u32 en)
{
	*reg |= en;
 800065c:	6803      	ldr	r3, [r0, #0]
 800065e:	ea41 0303 	orr.w	r3, r1, r3
 8000662:	6003      	str	r3, [r0, #0]
}
 8000664:	4770      	bx	lr
	...

08000668 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(u32 clk)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <rcc_set_sysclk_source+0x10>)
 800066a:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
	RCC_CFGR = (reg32 | clk);
 800066c:	f022 0203 	bic.w	r2, r2, #3
 8000670:	ea40 0202 	orr.w	r2, r0, r2
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	4770      	bx	lr
 8000678:	40021004 	.word	0x40021004

0800067c <rcc_set_pll_multiplication_factor>:

void rcc_set_pll_multiplication_factor(u32 mul)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <rcc_set_pll_multiplication_factor+0x10>)
 800067e:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 21) | (1 << 20) | (1 << 19) | (1 << 18));
	RCC_CFGR = (reg32 | (mul << 18));
 8000680:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8000684:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	4770      	bx	lr
 800068c:	40021004 	.word	0x40021004

08000690 <rcc_set_pll_source>:

void rcc_set_pll_source(u32 pllsrc)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <rcc_set_pll_source+0x10>)
 8000692:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 16);
	RCC_CFGR = (reg32 | (pllsrc << 16));
 8000694:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000698:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800069c:	601a      	str	r2, [r3, #0]
}
 800069e:	4770      	bx	lr
 80006a0:	40021004 	.word	0x40021004

080006a4 <rcc_set_pllxtpre>:

void rcc_set_pllxtpre(u32 pllxtpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <rcc_set_pllxtpre+0x10>)
 80006a6:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~(1 << 17);
	RCC_CFGR = (reg32 | (pllxtpre << 17));
 80006a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80006ac:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	4770      	bx	lr
 80006b4:	40021004 	.word	0x40021004

080006b8 <rcc_set_adcpre>:

void rcc_set_adcpre(u32 adcpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <rcc_set_adcpre+0x10>)
 80006ba:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 14) | (1 << 15));
	RCC_CFGR = (reg32 | (adcpre << 14));
 80006bc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80006c0:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	4770      	bx	lr
 80006c8:	40021004 	.word	0x40021004

080006cc <rcc_set_ppre1>:

void rcc_set_ppre1(u32 ppre1)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <rcc_set_ppre1+0x10>)
 80006ce:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 8) | (1 << 9) | (1 << 10));
	RCC_CFGR = (reg32 | (ppre1 << 8));
 80006d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80006d8:	601a      	str	r2, [r3, #0]
}
 80006da:	4770      	bx	lr
 80006dc:	40021004 	.word	0x40021004

080006e0 <T.0>:

void rcc_set_hpre(u32 hpre)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80006e0:	4b02      	ldr	r3, [pc, #8]	; (80006ec <T.0+0xc>)
 80006e2:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 80006e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	4770      	bx	lr
 80006ec:	40021004 	.word	0x40021004

080006f0 <T.1>:

void rcc_set_ppre2(u32 ppre2)
{
	u32 reg32;

	reg32 = RCC_CFGR;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <T.1+0xc>)
 80006f2:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 11) | (1 << 12) | (1 << 13));
 80006f4:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
	RCC_CFGR = (reg32 | (ppre2 << 11));
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	4770      	bx	lr
 80006fc:	40021004 	.word	0x40021004

08000700 <rcc_clock_setup_in_hse_8mhz_out_24mhz>:
/** @brief RCC Set System Clock PLL at 24MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_24mhz(void)
{
 8000700:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8000702:	2004      	movs	r0, #4
 8000704:	f7ff ff7a 	bl	80005fc <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8000708:	2004      	movs	r0, #4
 800070a:	f7ff ff3f 	bl	800058c <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffaa 	bl	8000668 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff ff71 	bl	80005fc <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 800071a:	2003      	movs	r0, #3
 800071c:	f7ff ff36 	bl	800058c <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ffa1 	bl	8000668 <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 8000726:	f7ff ffdb 	bl	80006e0 <T.0>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV2);	/* Set. 12MHz Max. 14MHz */
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff ffc4 	bl	80006b8 <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_NODIV);	/* Set. 24MHz Max. 36MHz */
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ffcb 	bl	80006cc <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);	/* Set. 24MHz Max. 72MHz */
 8000736:	f7ff ffdb 	bl	80006f0 <T.1>
	 * Sysclk runs with 24MHz -> 0 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f8bc 	bl	80008b8 <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 3.
	 * 8MHz (external) * 3 (multiplier) = 24MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL3);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ff9b 	bl	800067c <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ffa2 	bl	8000690 <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ffa9 	bl	80006a4 <rcc_set_pllxtpre>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff52 	bl	80005fc <rcc_osc_on>
	rcc_wait_for_osc_ready(PLL);
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff ff17 	bl	800058c <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff ff82 	bl	8000668 <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ppre1_frequency = 24000000;
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x70>)
 8000766:	4a03      	ldr	r2, [pc, #12]	; (8000774 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x74>)
 8000768:	6013      	str	r3, [r2, #0]
	rcc_ppre2_frequency = 24000000;
 800076a:	4a03      	ldr	r2, [pc, #12]	; (8000778 <rcc_clock_setup_in_hse_8mhz_out_24mhz+0x78>)
 800076c:	6013      	str	r3, [r2, #0]
}
 800076e:	bd08      	pop	{r3, pc}
 8000770:	016e3600 	.word	0x016e3600
 8000774:	20000000 	.word	0x20000000
 8000778:	20000004 	.word	0x20000004

0800077c <dma_disable_transfer_complete_interrupt>:
@param[in] channel unsigned int8. Channel number: 1-7 for DMA1 or 1-5 for DMA2
*/

void dma_disable_transfer_complete_interrupt(u32 dma, u8 channel)
{
	DMA_CCR(dma, channel) &= ~DMA_CCR_TCIE;
 800077c:	2314      	movs	r3, #20
 800077e:	3901      	subs	r1, #1
 8000780:	4359      	muls	r1, r3
 8000782:	3008      	adds	r0, #8
 8000784:	5843      	ldr	r3, [r0, r1]
 8000786:	f023 0302 	bic.w	r3, r3, #2
 800078a:	5043      	str	r3, [r0, r1]
}
 800078c:	4770      	bx	lr

0800078e <dma_disable_channel>:
@param[in] channel unsigned int8. Channel number: 1-7 for DMA1 or 1-5 for DMA2
*/

void dma_disable_channel(u32 dma, u8 channel)
{
	DMA_CCR(dma, channel) &= ~DMA_CCR_EN;
 800078e:	2314      	movs	r3, #20
 8000790:	3901      	subs	r1, #1
 8000792:	4359      	muls	r1, r3
 8000794:	3008      	adds	r0, #8
 8000796:	5843      	ldr	r3, [r0, r1]
 8000798:	f023 0301 	bic.w	r3, r3, #1
 800079c:	5043      	str	r3, [r0, r1]
}
 800079e:	4770      	bx	lr

080007a0 <gpio_set>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void gpio_set(u32 gpioport, u16 gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80007a0:	6101      	str	r1, [r0, #16]
}
 80007a2:	4770      	bx	lr

080007a4 <gpio_clear>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void  gpio_clear(u32 gpioport, u16 gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80007a4:	0409      	lsls	r1, r1, #16
 80007a6:	6101      	str	r1, [r0, #16]
}
 80007a8:	4770      	bx	lr

080007aa <gpio_toggle>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
             If multiple pins are to be changed, use logical OR '|' to separate them.
*/
void gpio_toggle(u32 gpioport, u16 gpios)
{
	GPIO_ODR(gpioport) ^= gpios;
 80007aa:	68c3      	ldr	r3, [r0, #12]
 80007ac:	404b      	eors	r3, r1
 80007ae:	60c3      	str	r3, [r0, #12]
}
 80007b0:	4770      	bx	lr

080007b2 <usart_set_databits>:
*/

void usart_set_databits(u32 usart, u32 bits)
{
	if (bits == 8)
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80007b2:	68c3      	ldr	r3, [r0, #12]
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(u32 usart, u32 bits)
{
	if (bits == 8)
 80007b4:	2908      	cmp	r1, #8
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80007b6:	bf0c      	ite	eq
 80007b8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
	else
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80007bc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80007c0:	60c3      	str	r3, [r0, #12]
 80007c2:	4770      	bx	lr

080007c4 <usart_set_stopbits>:

void usart_set_stopbits(u32 usart, u32 stopbits)
{
	u32 reg32;

	reg32 = USART_CR2(usart);
 80007c4:	6903      	ldr	r3, [r0, #16]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 80007cc:	6103      	str	r3, [r0, #16]
}
 80007ce:	4770      	bx	lr

080007d0 <usart_set_parity>:

void usart_set_parity(u32 usart, u32 parity)
{
	u32 reg32;

	reg32 = USART_CR1(usart);
 80007d0:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 80007d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007d6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80007d8:	60c3      	str	r3, [r0, #12]
}
 80007da:	4770      	bx	lr

080007dc <usart_set_mode>:

void usart_set_mode(u32 usart, u32 mode)
{
	u32 reg32;

	reg32 = USART_CR1(usart);
 80007dc:	68c3      	ldr	r3, [r0, #12]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80007de:	f023 030c 	bic.w	r3, r3, #12
 80007e2:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80007e4:	60c3      	str	r3, [r0, #12]
}
 80007e6:	4770      	bx	lr

080007e8 <usart_set_flow_control>:

void usart_set_flow_control(u32 usart, u32 flowcontrol)
{
	u32 reg32;

	reg32 = USART_CR3(usart);
 80007e8:	6943      	ldr	r3, [r0, #20]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 80007ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007ee:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 80007f0:	6143      	str	r3, [r0, #20]
}
 80007f2:	4770      	bx	lr

080007f4 <usart_enable>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_enable(u32 usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 80007f4:	68c3      	ldr	r3, [r0, #12]
 80007f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fa:	60c3      	str	r3, [r0, #12]
}
 80007fc:	4770      	bx	lr

080007fe <usart_send>:
*/

void usart_send(u32 usart, u16 data)
{
	/* Send data. */
	USART_DR(usart) = (data & USART_DR_MASK);
 80007fe:	05c9      	lsls	r1, r1, #23
 8000800:	0dc9      	lsrs	r1, r1, #23
 8000802:	6041      	str	r1, [r0, #4]
}
 8000804:	4770      	bx	lr

08000806 <usart_recv>:
*/

u16 usart_recv(u32 usart)
{
	/* Receive data. */
	return USART_DR(usart) & USART_DR_MASK;
 8000806:	6840      	ldr	r0, [r0, #4]
}
 8000808:	05c0      	lsls	r0, r0, #23
 800080a:	0dc0      	lsrs	r0, r0, #23
 800080c:	4770      	bx	lr

0800080e <usart_wait_send_ready>:
*/

void usart_wait_send_ready(u32 usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_SR(usart) & USART_SR_TXE) == 0);
 800080e:	6803      	ldr	r3, [r0, #0]
 8000810:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000814:	d0fb      	beq.n	800080e <usart_wait_send_ready>
}
 8000816:	4770      	bx	lr

08000818 <usart_send_blocking>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(u32 usart, u16 data)
{
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4604      	mov	r4, r0
 800081c:	460d      	mov	r5, r1
	usart_wait_send_ready(usart);
 800081e:	f7ff fff6 	bl	800080e <usart_wait_send_ready>
	usart_send(usart, data);
 8000822:	4620      	mov	r0, r4
 8000824:	4629      	mov	r1, r5
}
 8000826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
*/

void usart_send_blocking(u32 usart, u16 data)
{
	usart_wait_send_ready(usart);
	usart_send(usart, data);
 800082a:	f7ff bfe8 	b.w	80007fe <usart_send>

0800082e <usart_disable_rx_dma>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_disable_rx_dma(u32 usart)
{
	USART_CR3(usart) &= ~USART_CR3_DMAR;
 800082e:	6943      	ldr	r3, [r0, #20]
 8000830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000834:	6143      	str	r3, [r0, #20]
}
 8000836:	4770      	bx	lr

08000838 <usart_disable_tx_dma>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_disable_tx_dma(u32 usart)
{
	USART_CR3(usart) &= ~USART_CR3_DMAT;
 8000838:	6943      	ldr	r3, [r0, #20]
 800083a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800083e:	6143      	str	r3, [r0, #20]
}
 8000840:	4770      	bx	lr

08000842 <usart_enable_rx_interrupt>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_enable_rx_interrupt(u32 usart)
{
	USART_CR1(usart) |= USART_CR1_RXNEIE;
 8000842:	68c3      	ldr	r3, [r0, #12]
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	60c3      	str	r3, [r0, #12]
}
 800084a:	4770      	bx	lr

0800084c <usart_enable_tx_interrupt>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_enable_tx_interrupt(u32 usart)
{
	USART_CR1(usart) |= USART_CR1_TXEIE;
 800084c:	68c3      	ldr	r3, [r0, #12]
 800084e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000852:	60c3      	str	r3, [r0, #12]
}
 8000854:	4770      	bx	lr

08000856 <usart_disable_error_interrupt>:
@param[in] usart unsigned 32 bit. USART block register address base @ref usart_reg_base
*/

void usart_disable_error_interrupt(u32 usart)
{
	USART_CR3(usart) &= ~USART_CR3_EIE;
 8000856:	6943      	ldr	r3, [r0, #20]
 8000858:	f023 0301 	bic.w	r3, r3, #1
 800085c:	6143      	str	r3, [r0, #20]
}
 800085e:	4770      	bx	lr

08000860 <blocking_handler>:
	/* Call the application's entry point. */
	main();
}

void blocking_handler(void)
{
 8000860:	e7fe      	b.n	8000860 <blocking_handler>

08000862 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8000862:	4770      	bx	lr

08000864 <reset_handler>:

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <reset_handler+0x28>)
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <reset_handler+0x2c>)
 8000868:	e003      	b.n	8000872 <reset_handler+0xe>
		*dest = *src;
 800086a:	f852 1b04 	ldr.w	r1, [r2], #4
 800086e:	f843 1b04 	str.w	r1, [r3], #4

void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <reset_handler+0x30>)
 8000874:	428b      	cmp	r3, r1
 8000876:	d3f8      	bcc.n	800086a <reset_handler+0x6>
 8000878:	e002      	b.n	8000880 <reset_handler+0x1c>
		*dest = *src;

	while (dest < &_ebss)
		*dest++ = 0;
 800087a:	2200      	movs	r2, #0
 800087c:	f843 2b04 	str.w	r2, [r3], #4
	volatile unsigned *src, *dest;

	for (src = &_data_loadaddr, dest = &_data; dest < &_edata; src++, dest++)
		*dest = *src;

	while (dest < &_ebss)
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <reset_handler+0x34>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d3f9      	bcc.n	800087a <reset_handler+0x16>

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
 8000886:	f7ff bc70 	b.w	800016a <main>
 800088a:	bf00      	nop
 800088c:	080008cc 	.word	0x080008cc
 8000890:	20000000 	.word	0x20000000
 8000894:	20000008 	.word	0x20000008
 8000898:	20000454 	.word	0x20000454

0800089c <nvic_enable_irq>:
@param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
*/

void nvic_enable_irq(u8 irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <nvic_enable_irq+0x18>)
 800089e:	2201      	movs	r2, #1
 80008a0:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80008a4:	f000 001f 	and.w	r0, r0, #31
 80008a8:	fa12 f000 	lsls.w	r0, r2, r0
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	6018      	str	r0, [r3, #0]
}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	38003840 	.word	0x38003840

080008b8 <flash_set_ws>:

void flash_set_ws(u32 ws)
{
	u32 reg32;

	reg32 = FLASH_ACR;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <flash_set_ws+0x10>)
 80008ba:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 80008bc:	f022 0207 	bic.w	r2, r2, #7
	reg32 |= ws;
 80008c0:	ea40 0202 	orr.w	r2, r0, r2
	FLASH_ACR = reg32;
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	4770      	bx	lr
 80008c8:	40022000 	.word	0x40022000
